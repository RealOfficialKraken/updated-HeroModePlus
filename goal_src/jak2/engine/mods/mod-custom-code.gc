    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;




#|
TODO: FINISH HELL MODE
--------------------------------------------
- Make the guards disappear on chance in granger
- Make the resist of their damage more spread out and even in granger
- Make variations of the sounds played firsthand
- Make a UNIVERSES DESTROYED count bound to continue-deaths?


FINISHED :D
|#






(deftype cty-guard-turret (process-focusable)
  (
    (incoming-attack-id uint32        :offset-assert 204)
    (jm-turret          joint-mod        :offset-assert 208)
    (jm-gunsL           joint-mod        :offset-assert 212)
    (jm-gunsR           joint-mod        :offset-assert 216)
    (angle-turret       degrees       :offset-assert 220)
    (angle-guns         degrees       :offset-assert 224)
    (last-no-zero       int64         :offset-assert 232)
    (next-time-shot     time-frame    :offset-assert 240)
    (num-shots          uint32        :offset-assert 248)
    (focus              focus :inline :offset-assert 256)
    (id                 int32         :offset-assert 268)
    (destroyed          symbol        :offset-assert 272)
    (button-down?       symbol        :offset-assert 276)
    (hit-points         int32         :offset-assert 280)
  )
  :method-count-assert 36
  :size-assert         #x11c ;; 284
  :flag-assert         #x2400a0011c
  (:state-methods
    idle
    hostile
    explode
    wait-for-pushing
    pushed
    )
  (:methods
    (cty-guard-turret-method-32 (_type_) none) ;; 32
    (cty-guard-turret-method-33 (_type_) none) ;; 33
    (cty-guard-turret-method-34 (_type_) none) ;; 34
    (cty-guard-turret-method-35 (_type_) quaternion) ;; 35
    )
  )

  (defbehavior cty-guard-turret-init-by-other cty-guard-turret ((vec vector))
    (cty-guard-turret-method-32 self)
    (vector-copy! (-> self root trans) vec)
    (vector-identity! (-> self root scale))
    (initialize-skeleton
      self
      (the skeleton-group (art-group-get-by-name *level* "skel-cty-guard-turret" (the (pointer uint32) #f)))
      (the pair 0)
      )
    (cty-guard-turret-method-33 self)
    (reset-to-collide-spec (-> self focus) (collide-spec jak player-list))
    (set! (-> self jm-turret) (new 'process 'joint-mod (joint-mod-mode joint-set*) *target* 6))
    (set! (-> self jm-gunsL) (new 'process 'joint-mod (joint-mod-mode joint-set*) *target* 7))
    (set! (-> self jm-gunsR) (new 'process 'joint-mod (joint-mod-mode joint-set*) *target* 8))
    (set! (-> self part) (create-launch-control (-> *part-group-id-table* 186) *target*))
    (set! (-> self id) 0)
    (set! (-> self destroyed) #f)
    (set! (-> self hit-points) 6)
    (go (method-of-object self idle))
    (none)
  )





  (defun camera-lock! ()
    (set! (-> *target* cam-user-mode) 'look-around)
    (send-event *target* 'draw #f)
    (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
    (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
    (process-grab? *target* #f)
    (set! camera-locked #t)
    (none)
  )

  (defun camera-unlock! ()
    (send-event *target* 'draw #t)
    (process-release? *target*)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (set! camera-locked #f)
    (none)
  )

  (defun start-tpfb! ()
    (set! start-frame-count #t)
    (set! stored-cp? #t)
    (set! new-game-s? #t)
    (when (= hell-mode-option #t)
      (set! in-hellmode-tpfb #t)
    ) 
    (when (= (-> *progress-state* which-slot) 0)
      (set! load-state-tp 0)
    )
    (when (= (-> *progress-state* which-slot) 1)
      (set! load-state-tp 1)
    )
    (when (= (-> *progress-state* which-slot) 2)
      (set! load-state-tp 2)
    )
    (when (= (-> *progress-state* which-slot) 3)
      (set! load-state-tp 3)
    )
    (none)
  )



    (defun runs-every-frame ()
      ;; (increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc

      ;; Sample code to turn jak pink whenever he's doing the jetboard hover glitch
      ;; (when *target* 
      ;;   (if (board-hovering?)
      ;;     (draw-pink *target*)
      ;;     (draw-normal *target*)
      ;;     )
      ;;   )





























;new game for granger but in progress!



#|(when (and (= in-menu #t)(= (-> *game-info* task-deaths) 4))
  (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>L1: <COLOR_PINK>New Game in Apocalypse Mode ~S"
  grangerd-string
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 130 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t) (= (-> *game-info* task-deaths) 7))
  (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>L1: <COLOR_PINK>~S"
  modifiers-toggle-string
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 120 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (-> *game-info* task-deaths) 4)(cpad-hold? 0 l2))
  (+! toffm-int 1)
  (when (and (= toffm-int 60)(= (-> *game-info* fuel) 0.0))
    (set! modifiers-toggle-string "All Modifiers Turned On")
    (set! (-> *game-info* fuel) 10.0)
    (set! toffm-int 0)
    (set! turn-on-modifiers #f)
  )
  (when (and (= toffm-int 60)(= (-> *game-info* fuel) 10.0))
    (set! modifiers-toggle-string "All Modifiers Turned Off")
    (set! (-> *game-info* fuel) 0.0)
    (set! toffm-int 0)
    (set! turn-on-modifiers #f)
  )
)

(when (and (= in-menu #t)(= (-> *game-info* task-deaths) 4)(not (cpad-hold? 0 l2)))
  (set! toffm-int 0)
  (when (= (-> *game-info* fuel) 0.0)
    (set! modifiers-toggle-string "Toggle Modifiers On")
  )
  (when (= (-> *game-info* fuel) 10.0)
    (set! modifiers-toggle-string "Toggle Modifiers Off (broken for now)")
  )
)

(when (= toffm-int 1)
  (set! modifiers-toggle-string "(.  )")
)
(when (= toffm-int 15)
  (set! modifiers-toggle-string "(.. )")
)
(when (= toffm-int 45)
  (set! modifiers-toggle-string "(...)")
)

(when (and (= in-menu #t)(!= granger-ngi 0)(= (-> *game-info* task-deaths) 4)(not (cpad-hold? 0 l1)))
  (set! granger-ngi 0)
)

(when (and (= in-menu #t)(= (-> *game-info* task-deaths) 4)(cpad-hold? 0 l1))
  (+! granger-ngi 1)
  (when (= granger-ngi 1)
    (set! grangerd-string "()")
  )
  (when (= granger-ngi 60)
    (set! grangerd-string "(.)")
  )
  (when (= granger-ngi 120)
    (set! grangerd-string "(..)")
  )
  (when (= granger-ngi 180)
    (set! grangerd-string "(...)")
  )
  (when (= granger-ngi 240)
    (set! grangerd-string "(!..)")
  )
  (when (= granger-ngi 300)
    (set! grangerd-string "(!!.)")
  )
  (when (= granger-ngi 360)
    (set! grangerd-string "(!!!)")
  )
  (when (= granger-ngi 420)
    (set! granger-newgame #t)
  )
)
(when (= granger-newgame #t)
  (+! granger-newgamei 1)
  (when (= granger-newgamei 1)
    (set! camera-locked #f)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    (set! wait-start #t)
    (set! pause-menu-blocked? #f)
    (set! string-printed? #f)
  )
  (when (= granger-newgamei 3)
    (initialize! *game-info* 'game (the-as game-save #f) (the-as string #f))
  )
  (when (= granger-newgamei 120)
    (set! (-> *game-info* task-deaths) 7)
    (set! granger-newgame #f)
    (set! granger-newgamei 0)
  )
)

|#
(when (and (= (pause-allowed?) #t)(= granger-ohshitalways #t))
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 140.0) 
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #t)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
  (set! granger-level 1)
  (set! granger-activated? #t)
)


;(when (and (= (-> *game-info* task-deaths) 7)(= granger-mode #t) (or (and (task-node-closed? (game-task-node city-help-kid-introduction)) (not (task-node-closed? (game-task-node city-help-kid-resolution))) ) (and (task-node-closed? (game-task-node city-krew-delivery-introduction)) (not (task-node-closed? (game-task-node city-krew-delivery-resolution))) ) (and (task-node-closed? (game-task-node city-escort-kid-introduction)) (not (task-node-closed? (game-task-node city-escort-kid-resolution))) ) (and (task-node-closed? (game-task-node city-protect-water-slums-introduction)) (not (task-node-closed? (game-task-node city-protect-water-slums-resolution))) )))(set! granger-mode #f))

#|(when (and (= (-> *game-info* task-deaths) 7)(= granger-mode #t)
    (or
      (and
        (task-node-closed? (game-task-node city-help-kid-introduction))
        (not (task-node-closed? (game-task-node city-help-kid-resolution)))
      )
      (and
        (task-node-closed? (game-task-node city-krew-delivery-introduction))
        (not (task-node-closed? (game-task-node city-krew-delivery-resolution)))
      )
      (and
        (task-node-closed? (game-task-node city-escort-kid-introduction))
        (not (task-node-closed? (game-task-node city-escort-kid-resolution)))
      )
      (and
        (task-node-closed? (game-task-node city-protect-water-slums-introduction))
        (not (task-node-closed? (game-task-node city-protect-water-slums-resolution)))
      )
    )
  )
  (set! granger-mode #f)
)|#

#|
(when (= (-> *game-info* task-deaths) 7)
  (when (and (= set-functions #f) (= (pause-allowed?) #t)
  (or 
  (= rapid-fire-option #f)
  (= double-tap-option #f)
  (= guard-shot-option #f)
  (= guard-grenade-option #f)
  (= leg-random-shot #f)
  (= mehrunes-shot-option #f)
  (= mag-bag-option #f)
  (= blast-shot-option #f)
  (= pm-extra-shot-option #f)
  ) 
  (= (-> *game-info* task-deaths) 7)
  )
  (set! enter-granger #t)
  (print "Entered Granger")
  )

  (when 
    (or
      (and
        (task-node-closed? (game-task-node city-help-kid-introduction))
        (not (task-node-closed? (game-task-node city-help-kid-resolution)))
      )
      (and
        (task-node-closed? (game-task-node city-krew-delivery-introduction))
        (not (task-node-closed? (game-task-node city-krew-delivery-resolution)))
      )
      (and
        (task-node-closed? (game-task-node city-escort-kid-introduction))
        (not (task-node-closed? (game-task-node city-escort-kid-resolution)))
      )
      (and
        (task-node-closed? (game-task-node city-protect-water-slums-introduction))
        (not (task-node-closed? (game-task-node city-protect-water-slums-resolution)))
      )
    )
    (set! exit-granger #t)
    (print "Exited Granger")
  )
)

|#
(when (= (-> *game-info* task-deaths) 7)
  (if 
    (or
        (and
          (task-node-closed? (game-task-node city-help-kid-introduction))
          (not (task-node-closed? (game-task-node city-help-kid-resolution)))
        )
        (and
          (task-node-closed? (game-task-node city-krew-delivery-introduction))
          (not (task-node-closed? (game-task-node city-krew-delivery-resolution)))
        )
        (and
          (task-node-closed? (game-task-node city-escort-kid-introduction))
          (not (task-node-closed? (game-task-node city-escort-kid-resolution)))
        )
        (and
          (task-node-closed? (game-task-node city-protect-water-slums-introduction))
          (not (task-node-closed? (game-task-node city-protect-water-slums-resolution)))
        )
    )
      (set! exit-granger #t)
      (set! enter-granger #t)
  )
)
(when (and (= exit-granger #t)(= set-functions #t))
  (+! exit-grangeri 1)
  (when (= exit-grangeri 60)
  (set! granger-mode #f)
  (set! exit-granger #f)
  (set! exit-grangeri 0)
  (set! set-functions #f)
  )
)

(when (and (= enter-granger #t)(= set-functions #f))
(+! enter-grangeri 1)
(when (= enter-grangeri 60)
  (set! (-> *game-info* fuel) 10.0)
  (set! modifier-string "APOCALYPSE MODE")
  (set! weapon-mod-toggle #t)
  (set! (-> *game-info* task-deaths) 7)
  (logior! (-> *game-info* secrets) (game-secrets hero-mode))
  (set! hell-mode-option #t)
  (set! rapid-fire-option #t)
  (set! double-tap-option #t)
  (set! guard-shot-option #t)
  (set! guard-grenade-option #t)
  (set! leg-random-shot #t)
  (set! pm-extra-shot-option #t)
  (set! mag-bag-option #t)
  (set! blast-shot-option #t)
  (set! mehrunes-shot-option #t)
  (set! granger-ohshitalways #t)
  (set! peacemaker-ability #t)
  (set! tp-fb #t)
  (set! hover-damage #t)
  (set! dark-traffic #t)
  (set! trip-metalheads #t)
  (set! target-explode #t)
  (set! granger-mode #t)
  (set! enter-granger #f)
  (set! enter-grangeri 0)
  (set! set-functions #t)
)
)

(when (and (= granger-ohshitalways #t)(= (pause-allowed?) #t)(!= (-> *game-info* task-deaths) 7))
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-default)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 40.0) 
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #f)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
  (set! granger-level 0)
  (set! granger-activated? #t)
  (set! granger-resist 0)
  (set! granger-mode #f)
  (set! granger-ohshitalways #f)
  (set! rapid-fire-option #f)
  (set! double-tap-option #f)
  (set! guard-shot-option #f)
  (set! guard-grenade-option #f)
  (set! leg-random-shot #f)
  (set! pm-extra-shot-option #f)
  (set! mag-bag-option #f)
  (set! blast-shot-option #f)
  (set! mehrunes-shot-option #f)
  (set! mission-grab-1 #f)
  (set! mission-grab-2 #f)
  (set! mission-grab-3 #f)
  (set! mission-grab-4 #f)
  (set! orb-grab-1 #f)
  (set! orb-grab-2 #f)
  (set! orb-grab-3 #f)
  (set! mod-pick #t)
)

;DISABLING ALL OF THE POWERFUL SECRETS
  (when (and (= granger-mode #f)(= (-> *game-info* fuel) 10.0))
    (when (and (= settingunlocked2 #f)(logtest? (-> *game-info* secrets) (game-secrets endless-ammo)))
      (logclear! (-> *game-info* secrets) (game-secrets endless-ammo))
    )

    (when (and (= settingunlocked1 #f)(logtest? (-> *game-info* secrets) (game-secrets endless-dark)))
      (logclear! (-> *game-info* secrets) (game-secrets endless-dark))
    )

    (when (and (= settingunlocked3 #f)(= inv-frame-start #f)(= inv-frame-start-g #f)(logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
      (logclear! (-> *game-info* secrets) (game-secrets invulnerable))
    )
  )




;WEAPON MOD SPAWNS, REWARDS, AND SAVES
;Once a legendary is spawned it unlocks it for you. Later ill figure how to do it upon pickup, but for now I have no fucking clue. :L
;Right now all gun mods are set towards mod-default-gun, which is the yellow gun atm, until Mod-Base updates with the updated misc menu in "game-options" then you can select it your*target*.


(when (= mod-reroll #t)
  (when (and (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))(< (-> *game-info* gem) 25.0))
    (print "[MOD] NOT ENOUGH GEMS, REQUIRE 25 TO REROLL
")
    (set! mod-reroll-string "NOT ENOUGH GEMS")
    (set! mod-reroll #f)
  )
  (when (and (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))(>= (-> *game-info* gem) 25.0))
    (set! (-> *game-info* gem) (- (-> *game-info* gem) 25.0))
    (set! mod-pick #t)
    (print "[MOD] SUCCESSFULLY REROLLED >:)
")
    (set! mod-reroll-string "Successfully Re-Rolled.")
    (set! mod-reroll #f)
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (print "[MOD] YOU'RE NOT ALLOWED TO RE-ROLL WHILE IN HELL-MODE }:]
")
    (set! mod-reroll #f)
  )
)

(when (and (= hell-mode-option #t)(= (-> *game-info* fuel) 10.0) (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode))))
  (set! mod-pick #t)
  (set! hell-mode-option #f)
  (when (= (-> *game-info* task-deaths) 7)
    (set! (-> *game-info* task-deaths) 0)
  )
)

(when (= granger-teleport #t) ;left outside of the code to run whenever :L
    (set! (-> *target* fact health) 8.0)
    (set! auto-save-delayed? #t)
    (let ((n 0)
          (p (set! granger-teleport #f))
          (pp (set! granger-level 0))
          (ppp (set! granger-activated? #t))
          (peepeepeepee (set! spawntheturrets #f)))
      (set! n (rand-vu-int-range 1 8))
      (when (rand-vu-percent? 0.02)
        (set! n 0)
        (set! eine #t)
      )
      (when (task-node-closed? (game-task-node mountain-lens-introduction))
        (when (= n 1)
          (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-hut"))
        )
        (when (= n 2)
          (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-tower"))
        )
        (when (= n 3)
          (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
        )
        (when (= n 4)
          (send-event *target* 'continue (get-continue-by-name *game-info* "caspad-start"))
        )
        (when (= n 5)
          (send-event *target* 'continue (get-continue-by-name *game-info* "strip-warp"))
        )
        (when (= n 6)
          (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
        )
        (when (= n 7)
          (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-hut"))
        )
        (when (= n 8)
          (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
        )
      )
      p
      pp
      ppp
      peepeepeepee
    )
  )

(when (= eine #t)
  (+! einei 1)
  (when (= einei 3)
    (send-event *target* 'continue (get-continue-by-name *game-info* "village1-start"))
  )
  (when (= einei 7200)
    (set! granger-teleport #t)
    (set! einei 0)
    (set! eine #f)
  )
  (when (= (-> *target* fact health) 0.0)
    (set! granger-teleport #t)
    (set! einei 0)
    (set! eine #f)
  )
)


(when (and (= granger2-activated? #t)(= granger-win #f))
  (when (>= granger-unit 0)
    (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_GREEN>~S")
    (set! current-situations "STABLE")
    (set! granger-level 0)
    (set! granger-activated? #t)
    (set! granger-win #t)
  )
  (when (>= granger-unit 50)
    (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_YELLOW>~S")
    (set! current-situations "SEVERE RISK")
  )
  (when (>= granger-unit 100)
    (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_RED>~S")
    (set! current-situations "UNSTABLE")
  )
  (when (>= granger-unit 150)
    (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_PINK>~S")
    (set! current-situations "LOST")
    (set! granger-level 2)
    (set! granger-activated? #t)
  )
)
(when (= ohshitfirsttime #t)
 (set! tp-fb #f)
 (set! target-explode #f)
)
(when (and (task-node-closed? (game-task-node mountain-lens-introduction))(= weapon-mod-toggle #t))
(when (and (= ohshitfirsttime #t)(= (paused?) #f))
 (when (<= ohshiti 20200)
  (+! ohshiti 1)
 )
 (set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
 (when (= ohshiti 1)
  (play-sound-file "data/goal_src/jak2/pc/snd/deathhascome.mp3" 200) 
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 240.0) 
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #t)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
   )
 (when (= ohshiti 320) 
    ;set lwideb on
    (set! granger-level 1)
    (set! granger-activated? #t)
    (set! granger-resist 4)
 )
 (when (= ohshiti 2350)
    (set! granger-resist 8)
 )
 (when (= ohshiti 3500)
  (set! granger-resist 10)

 )
 (when (= ohshiti 5500)
  (set! granger-resist 20)
 )
 (when (= ohshiti 7198)
  (set! granger-resist 30)
  (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_RED>~S")
  (set! current-situations "UNSTABLE")
  (set! spawntheturrets #t)
 )
 (when (= ohshiti 9198)
  (set! granger-resist 40)
 )
 (when (= ohshiti 11198)
  (set! granger-resist 50)
 )
 (when (= ohshiti 13198)
  (set! granger-resist 99)
  (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_PINK>~S")
  (set! current-situations "LOST")
  (set! granger-level 2)
  (set! granger-activated? #t)
 )
 (when (= ohshiti 20198)
  (set! granger-resist 999)
 )
 (when (and (= (-> *target* fact health) 0.0)(= (pause-allowed?) #t))
  (set! delayed-gt #t)
 )
)

(when (and (= delayed-gt #t)(= stored-cp? #f))
  (+! gt-count 1)
  (when (= gt-count 1)
    (set! pause-menu-blocked? #f)
    (set! ohshiti 0)
    (set! ohshitfirsttime #f)
  )
  (when (= gt-count 60)
  (set! granger-teleport #t)
  (stop-sound-file "data/goal_src/jak2/pc/snd/deathhascome.mp3")
  )
  (when (>= gt-count 80)
  (set! (-> *mood-control* overide-weather-flag) #f)
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-default)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 1.0)
  (send-event *traffic-manager* 'set-alert-level 0)
  (when (= (-> *game-info* fuel) 10)
    (when (= tp-fb-win #f)
      (set! tp-fb #t)
      (set! target-explode #t)
    )
    (when (= tp-fb-win #t)
      (set! target-explode #t)
    )
  )
  (set! gt-count 0)
  (set! delayed-gt #f)
  )
)



(when (= ohshit #t)
  (+! ohshiti 1)
  (when (= ohshiti 1)
    (set! (-> *mood-control* overide-weather-flag) #t)
    (play-sound-file "data/goal_src/jak2/pc/snd/theendisnigh.mp3" 200)
    (set! granger-unit 50)
    (set! current-situation "<COLOR_WHITE>Timeline Stability: <COLOR_YELLOW>~S")
    (set! current-situations "SEVERE RISK")
  )
    (when (and (>= ohshiti 1)(< gt-i 0.9))
      (+! gt-i 0.01)
      (set! (-> *mood-control* overide cloud) gt-i)
    )
    (when (and (>= ohshiti 180)(< gf-i 0.9))
      (set! gf-i 0.01)
      (set! (-> *mood-control* overide fog) gf-i)
    )
    (when (= ohshiti 594)
      (set! (-> *time-of-day-context* overide-enable) #t)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 2.0)
    )
  (when (= ohshiti 600)
    (set! ohshiti 0)
    (set! ohshit #f)
    (set! ohshitfirsttime #t)
    (set! gf-i 0.0)
    (set! gt-i 0.0)
  )
)
)

(when (= ohshitactualfirst #t)
  (+! ohshiti 1)
  (when (= ohshiti 1)
    (set! (-> *mood-control* overide-weather-flag) #t)
    (play-sound-file "data/goal_src/jak2/pc/snd/theendisnigh.mp3" 200)
  )
    (when (and (>= ohshiti 1)(< gt-i 0.9))
      (+! gt-i 0.01)
      (set! (-> *mood-control* overide cloud) gt-i)
    )
    (when (and (>= ohshiti 180)(< gf-i 0.9))
      (set! gf-i 0.01)
      (set! (-> *mood-control* overide fog) gf-i)
    )
    (when (= ohshiti 1000)
      (set! (-> *game-info* gem) 0.0)
    )
    (when (= ohshiti 1394)
      (set! (-> *time-of-day-context* overide-enable) #t)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 2.0)
    )
  (when (= ohshiti 1400)
    (set! ohshitactualfirst #f)
    (set! ohshitfirsttime #t)
    (set! gf-i 0.0)
    (set! gt-i 0.0)
    (set! ohshiti 0)
  )
)




(when (and (= (-> *game-info* fuel) 0.0)(= weapon-mod-toggle #t)) ;checks for if you have weapon mod toggle on, then gives you a modifier
  (cond
    ((= stored-cp? #f)
      (set! mod-pick #t)
    )
    (else
      (cond
        ((= in-hellmode-tpfb #t)
          (set! (-> *game-info* fuel) 10.0)
        )
        (else
          (set! (-> *game-info* fuel) 2.0)
        )
      )
    )
  )
)

(when (= mod-pick #t)
  (set! mod-rand (rand-vu-int-range 1 6))
  (when (= mod-rand 1)
    (set! (-> *game-info* fuel) 1.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Peacemaker Ability!
")
  (set! auto-save-delayed? #t)
  )
  (when (and (or (!= (-> *game-info* total-trys) 1)(!= (-> *game-info* buzzer-total) 1.0))(= mod-rand 2))
    (set! (-> *game-info* fuel) 2.0)
    (set! mod-pick #f)
          (print "[MOD] rolled for Teleport to Final Boss!
")
(set! auto-save-delayed? #t)
    (when (or (= (-> *game-info* total-trys) 1)(= (-> *game-info* buzzer-total) 1.0))
      (print "[MOD] You already beat tp-fb! rerolling...
")
      (set! mod-pick #t)
    )
  )
  (when (= mod-rand 3)
    (set! (-> *game-info* fuel) 3.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Hoverboard/Enemy Health!
")
(set! auto-save-delayed? #t)
  )
  (when (= mod-rand 4)
    (set! (-> *game-info* fuel) 4.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Dark Eco / Threatening Traffic
")
(set! auto-save-delayed? #t)
  )
  (when (= mod-rand 5)
    (set! (-> *game-info* fuel) 5.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Trip Jak / Metalheads!
")
(set! auto-save-delayed? #t)
  )
  (when (= mod-rand 6)
    (set! (-> *game-info* fuel) 6.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for On Hit Target Explode / GunGame Ammo!
")
(set! auto-save-delayed? #t)
  )
)



(when (and (!= (-> *game-info* fuel) 0.0)(= weapon-mod-toggle #f))
  (set! weapon-mod-toggle #t)
)

(when (= weapon-mod-toggle #t)
  ;set params for init game
  (when (= weapon-toggle-false? #f)
    (set! weapon-toggle-false? #t)
  )

  ;Legendary Weapon Mod Saves
  (when (!= (-> *game-info* task-deaths) 7) 
    (when (and (and (= (-> *game-info* buzzer-total) 0.0)(= (-> *game-info* total-trys) 0))(or (= leg-random-shot #t)(= pm-extra-shot-option #t))) ;if none
      (set! pm-extra-shot-option #f)
      (set! leg-random-shot #f)
      (set! leg-got? #f)
    )
  )
  (when (and (= (-> *game-info* buzzer-total) 1.0)(= pm-extra-shot-option #f)) ;if 1 on buzzer-total, legendary extra chanced peacemaker-shot
    (set! pm-extra-shot-option #t)
    (set! tp-fb-win #t)
    (set! recieved-gm-s6 "Chanced Peacemaker Shot!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm6 #t)
    (set! tp-fb #f)
  )
  (when (and (or
              (= (-> *game-info* buzzer-total) 1.0)
              (= (-> *game-info* buzzer-total) 6.0)
              )(= leg-random-shot #f)) ;if 1 on total-trys, legendary random shot
    (set! leg-random-shot #t)
    (set! recieved-gm-s5 "Random Shot!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm5 #t)
  )

  (when (and (or
              (= (-> *game-info* buzzer-total) 2.0)
              (= (-> *game-info* buzzer-total) 6.0)
              )
              (= blast-shot-option #f))
    (set! blast-shot-option #t)
    (set! recieved-gm-s5 "Blast Shot!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm5 #t)
    (set! tp-fb-win #t)
    (set! tp-fb #f)
  )



  ;Modifier Saves
(when (= stored-cp? #f)
  (when (and (= (-> *game-info* fuel) 0.0)(= all-modifiers-off? #f)) ;if none
    (set! hell-mode-option #f)
    (set! peacemaker-ability #f)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #t)
    (set! weapon-mod-toggle #f)
    (set! trip-metalheads #f)
    (set! target-explode #f)
    (set! modifier-string "None")
  )

  (when (and (= (-> *game-info* fuel) 1.0)(= peacemaker-ability #f)) ;if 1, peacemaker ability
    (set! hell-mode-option #f)
    (set! peacemaker-ability #t)
    (set! tp-fb #f)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
    (set! modifier-string "Peacemaker Ability / 1 Hit Boss")
  )


  (when (and (= (-> *game-info* fuel) 2.0)(= tp-fb #f)) ;if 2, tp-fb
    (set! hell-mode-option #f)
    (set! tp-fb #t)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! peacemaker-ability #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
    (set! modifier-string "On-Death TP-FB Challenge")
  )
  (when (and (= (-> *game-info* fuel) 3.0)(= hover-damage #f)) ;if 3, hover-damage
    (set! hell-mode-option #f)
    (set! hover-damage #t)
    (set! dark-traffic #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
    (set! modifier-string "Boosted Hov Speed / Boosted Enemy HP")
  )
  (when (and (= (-> *game-info* fuel) 4.0)(= dark-traffic #f)) ;if 4, dark-traffic
    (set! hell-mode-option #f)
    (set! dark-traffic #t)
    (set! hover-damage #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
    (set! modifier-string "Chanced Max Eco collect / Traffic Max alert")
  )
  (when (and (= (-> *game-info* fuel) 5.0)(= trip-metalheads #f)) ;if 5, trip-metalheads
    (set! hell-mode-option #f)
    (set! dark-traffic #f)
    (set! hover-damage #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #t)
    (set! target-explode #f)
    (set! modifier-string "Chanced Trip / Gain 25 Metalheads")
  )
  (when (and (= ohshitfirsttime #f)(= (-> *game-info* fuel) 6.0)(= target-explode #f)) ;if 6, target-explode
    (set! hell-mode-option #f)
    (set! dark-traffic #f)
    (set! hover-damage #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #t)
    (set! modifier-string "On Hit Target Explode / GunGame Ammo")
  )
  (when (and (= (-> *game-info* fuel) 10.0)(= hell-mode-option #f)) ;if 10, hell mode }:)
    (set! hell-mode-option #t)
    (set! trip-metalheads #t)
    (set! dark-traffic #t)
    (set! hover-damage #t)
    (set! peacemaker-ability #t)
    (when (= tp-fb-win #f)
      (set! tp-fb #t)
      (set! modifier-string "HELL MODE")
    )
    (when (= tp-fb-win #t)
      (set! tp-fb #f)
      (set! modifier-string "| HELL MODE |")
    )
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! target-explode #t)
  )
)











(when (!= (-> *game-info* task-deaths) 7)
  ;Mission-Based Weapon Mod Gets
  (when (and (task-node-closed? (game-task-node city-krew-delivery-resolution))(= mission-grab-1 #f)) ;after red gun, get rapid fire
    (set! mission-grab-1 #t)
    (set! rapid-fire-option #t)
    (print "[GUN-MOD] Rapid Fire Acquired! Weapon Mod set to mod-default-gun
")
    (set! recieved-gm-s "Rapid Fire!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm #t) ;sets the draw func on
  )

  (when (and (task-node-closed? (game-task-node sewer-enemy-resolution))(= mission-grab-2 #f)) ;after yellow gun, get double tap
    (set! mission-grab-2 #t)
    (set! double-tap-option #t)
    (print "[GUN-MOD] Chanced Double Tap Acquired! Weapon Mod set to mod-default-gun
")
    (set! recieved-gm-s2 "Double-tap!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm2 #t)  ;sets the draw func on
  )

  (when (and (task-node-closed? (game-task-node ruins-enemy-introduction))(= mission-grab-3 #f)) ;after blue gun, get chanced guard shot
    (set! mission-grab-3 #t)
    (set! guard-shot-option #t)
    (print "[GUN-MOD] Chanced Guard Shot Acquired! Weapon Mod set to mod-default-gun
")
    (set! recieved-gm-s3 "Guard Shot!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm3 #t)  ;sets the draw func on
  )

  (when (and (task-node-closed? (game-task-node sewer-escort-get-gun))(= mission-grab-4 #f)) ;after dark gun, get chanced predator shot
    (set! mission-grab-4 #t)
    (set! guard-grenade-option #t)
    (print "[GUN-MOD] Chanced Predator Shot Acquired! Weapon Mod set to mod-default-gun
")
    (set! recieved-gm-s4 "Boom Stick!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm4 #t)  ;sets the draw func on
  )
  (when (or (= mission-grab-1 #f)(= mission-grab-2 #f)(= mission-grab-3 #f)(= mission-grab-4 #f))
    (set! mission-grab-1 #t)
    (set! mission-grab-2 #t)
    (set! mission-grab-3 #t)
    (set! mission-grab-4 #t)
  )
  (when (and (= orb-grab-1 #f)(= hell-mode-option #f)(>= (-> *game-info* skill) orb-count1)) ;when a certain amount of orbs or higher, get mag-bag
    (set! recieved-gm-s7 "Mag Bag!")
    (set! recieved-gm7 #t)
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! orb-grab-1 #t)
    (set! mag-bag-option #t)
    (when (= (-> *game-info* karma) 1.0)
      (set! mag-bag-int 1)
    )
    (when (= (-> *game-info* karma) 2.0)
      (set! mag-bag-int 2)
    )
    (when (= (-> *game-info* karma) 3.0)
      (set! mag-bag-int 3)
    )
    (when (= (-> *game-info* karma) 4.0)
      (set! mag-bag-int 4)
    )
    (when (= (-> *game-info* karma) 0.0)
      (set! mag-bag-int 0)
    )
  )
  (when (and (= orb-grab-1 #f)(= hell-mode-option #t)(>= (-> *game-info* skill) 100.0)) ;when a certain amount of orbs or higher, get mag-bag
    (set! recieved-gm-s7 "Mag Bag!")
    (set! recieved-gm7 #t)
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! orb-grab-1 #t)
    (set! mag-bag-option #t)
    (when (= (-> *game-info* karma) 1.0)
      (set! mag-bag-int 1)
    )
    (when (= (-> *game-info* karma) 2.0)
      (set! mag-bag-int 2)
    )
    (when (= (-> *game-info* karma) 3.0)
      (set! mag-bag-int 3)
    )
    (when (= (-> *game-info* karma) 4.0)
      (set! mag-bag-int 4)
    )
    (when (= (-> *game-info* karma) 0.0)
      (set! mag-bag-int 0)
    )
  )
  (when (and (= orb-grab-2 #f)(= hell-mode-option #f)(>= (-> *game-info* skill) 130.0)) ;when a certain amount of orbs or higher, get mehrunes-shot
    (set! recieved-gm-s8 "Mehrunes Shot!")
    (set! recieved-gm8 #t)
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! orb-grab-2 #t)
    (set! mehrunes-shot-option #t)
  )
  (when (and (= orb-grab-2 #f)(= hell-mode-option #t)(>= (-> *game-info* skill) 60.0)) ;when a certain amount of orbs or higher in HERO-MODE, unlock mehrunes-shot
    (set! recieved-gm-s8 "Mehrunes Shot!")
    (set! recieved-gm8 #t)
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! orb-grab-2 #t)
    (set! mehrunes-shot-option #t)
  )
  #|
  (when (and (= orb-grab-3 #f)(= (-> *game-info* skill) 10))
    (set! recieved-gm9 #t)
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! mushie-unlocked? #t)
    (set! orb-grab-3 #t)
  )
  (when (and (= orb-grab-3 #t)(< (-> *game-info* skill) 10))
    (set! recieved-gm9 #f)
    (set! mushie-unlocked? #f)
    (set! orb-grab-3 #f)
    (set! mushroom-movies #f)
  )
  |#
  ;looks for if their missions become un-completed after setting them, then takes away mission gun mods respectively
  (when (and (!= (-> *game-info* fuel) 10.0)(not (task-node-closed? (game-task-node city-krew-delivery-resolution)))(= mission-grab-1 #t))
    (set! mission-grab-1 #f)
    (set! rapid-fire-option #f)
  )

  (when (and (!= (-> *game-info* fuel) 10.0)(not (task-node-closed? (game-task-node sewer-enemy-resolution)))(= mission-grab-2 #t))
    (set! mission-grab-2 #f)
    (set! double-tap-option #f)
  )

  (when (and (!= (-> *game-info* fuel) 10.0)(not (task-node-closed? (game-task-node ruins-enemy-introduction)))(= mission-grab-3 #t))
    (set! mission-grab-3 #f)
    (set! guard-shot-option #f)
    (set! guard-shot-int 0)
  )

  (when (and (!= (-> *game-info* fuel) 10.0)(not (task-node-closed? (game-task-node sewer-escort-get-gun)))(= mission-grab-4 #t))
    (set! mission-grab-4 #f)
    (set! guard-grenade-option #f)
    (set! guard-grenade-int 0)
  )
    (when (and (= orb-grab-1 #t)(= hell-mode-option #f)(< (-> *game-info* skill) orb-count1))
    (set! mag-bag-option #f)
    (set! mag-bag-int 0)
    (set! orb-grab-1 #f)
    (set! mushie-unlocked? #f)
  )
  (when (and (= orb-grab-1 #t)(= hell-mode-option #t)(< (-> *game-info* skill) 100.0))
    (set! mag-bag-option #f)
    (set! mag-bag-int 0)
    (set! orb-grab-1 #f)
    (set! mushie-unlocked? #f)
  )
  (when (and (= orb-grab-2 #t)(= hell-mode-option #f)(< (-> *game-info* skill) 130.0))
    (set! mehrunes-shot-option #f)
    (set! mehrunes-shot-int 0)
    (set! orb-grab-2 #f)
  )
  (when (and (= orb-grab-2 #t)(= hell-mode-option #t)(< (-> *game-info* skill) 60.0))
    (set! mehrunes-shot-option #f)
    (set! mehrunes-shot-int 0)
    (set! orb-grab-2 #f)
  )
)

)



;Roll for a random legenedary gun mod
(when (= wm-roll-rand #t) ;this runs the roll for a random weapon mod to be unlocked. Super inefficient, i love it :)

  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 1)) ;checks if rolled for integer 1
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (set! (-> *game-info* buzzer-total) 1.0)
    (print "[GUN-MOD] | LEGENDARY |  Chanced Peacemaker Shot Acquired! Weapon Mod set to mod-default-gun
")
    (set! recieved-gm-s6 "Chanced Peacemaker Shot!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm5 #t)  ;sets the draw func on
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 2)) ;checks if rolled for integer 2
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (set! (-> *game-info* buzzer-total) 1.0)
    (print "[GUN-MOD] | LEGENDARY |  Chanced Peacemaker Shot Acquired! Weapon Mod set to mod-default-gun
")
    (set! recieved-gm-s5 "Random Shot!")
    (sound-play "ammo-pickup")
    (sound-play "board-boost")
    (set! recieved-gm6 #t) ;sets the draw func on
  )
  (when (= wm-roll-rand #t) ;rolls the integer
    (+! wm-roll-numb 1)
    (when (> wm-roll-numb 2)
      (set! wm-roll-numb 0)
    )
  )

)



(when (and (logtest? (-> *game-info* secrets) (game-secrets hero-mode))(!= (-> *game-info* fuel) 10.0)) ;if you're in hero-mode, sets to have hell-mode enabled in your save.
    (set! (-> *game-info* fuel) 10.0)
)
(when (= stored-cp? #f)
  (when (and (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))(= hell-mode-option #t)) ;if you're not in hero-mode, but you have set hell-mode on prior, set all to off.
      (set! hell-mode-option #f)
      (set! peacemaker-ability #f)
      (set! hover-damage #f)
      (set! dark-traffic #f)
      (set! tp-fb #f)
      (set! all-modifiers-off? #t)
      (set! weapon-mod-toggle #f)
      (set! trip-metalheads #f)
      (set! target-explode #f)
  )
)


(when (= wm-rand-shot #t) ;LEGENDARY Random Shot: rolls through a random shot and shoots it out of jaks weapon. Activated in gun-(color)-shot.gc.
        (set! wm-roll-shot (rand-vu-int-range 1 5))
        (when (= wm-roll-shot 1)
          (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
        (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )


        (when (= wm-roll-shot 2)
        (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
        )
        (when (= wm-roll-shot 3)
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
        )
        (when (= wm-roll-shot 4)
          (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
        (when (= wm-roll-shot 5)
        (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )
)



;DOUBLE TAP
;This is called from setting dt-frame-start to true, firing another projectile based on what weapon jak has it on, and whether or not guard-shot is taking its place.
;Peacemaker shot does not double tap, instead it just adds another peacemaker shot.
;---------------------------------------------------------------------------------------------

(when (= dt-frame-start #t)
  (+! dt-count 1)
)

(when (> dt-count 5)
    ;-------------------------------------------YELLOW SHOT-----------------------------------------------------------
    (when (and (= guard-grenade-option #t)(= double-tap-int 1)(!= guard-shot-int 1)(= guard-grenade-int 1))
     (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
    (when (and (!= guard-shot-int 1)(!= guard-grenade-int 1)(= double-tap-int 1))
      (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
    (when (and (= double-tap-int 1)(!= guard-grenade-int 1)(= guard-shot-int 1))
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
        )
        ;---------------------------------------------RED SHOT---------------------------------------------------
        (when (and (= guard-grenade-option #t)(!= guard-shot-int 2)(= double-tap-int 2)(= guard-grenade-int 2))
     (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
    (when (and (!= guard-shot-int 2)(!= guard-grenade-int 2)(= double-tap-int 2))
      (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
    (when (and (= double-tap-int 2)(!= guard-grenade-int 2)(= guard-shot-int 2))
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))

  )
  ;--------------------------------------------BLUE SHOT--------------------------------------------------
  (when (and (= guard-grenade-option #t)(!= guard-shot-int 3)(= double-tap-int 3)(= guard-grenade-int 3))
     (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
  (when (and (= double-tap-int 3)(!= guard-grenade-int 3)(!= guard-shot-int 3))
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (and (= double-tap-int 3) (!= guard-grenade-int 3)(= guard-shot-int 3))
    (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )

  (set! dt-count 0)
  (set! dt-frame-start #f)
)

;(someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))












;RAPID FIRE BLUE HAS ITS OWN GIANT BLOCK BECAUSE I CANT FUCK AROUND WITH THE FIRE RATE! D:<
;this is just the target-gun-fire-blue behavior copied and pasted 3 times on a global frame counter. Activates first at 5 frames, again at 10, and finally one more at 15.

(when (and (cpad-hold? 0 r1)(= rapid-fire-int 3)(= rapid-fire-option #t)(= (-> *target* gun gun-type) (pickup-type eco-blue))(= rapid-fire-blue #t))
  (+! rapid-fire-blue-frame 1)
  (when (= rapid-fire-blue-frame 5)
    (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> *target* entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> gp-0 fire-point quad))
      (set! (-> s4-1 vel quad) (-> s5-0 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (when (= rapid-fire-int 3)
        (set! rapid-fire-blue #t)
      )
            (when (and (!= guard-grenade-int 3)(!= guard-shot-int 3)) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WEAPON MOD CHANGES OCCUR HERE AND DOWN
        (spawn-projectile gun-blue-shot s4-1 (ppointer->process (-> gp-0 gun)) *default-dead-pool*)
      )
      (when (and (= guard-grenade-int 3)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
      )
      (when (and (= leg-random-int 3)(= leg-random-shot #t))                                    ;random shot
        (set! wm-rand-shot #t)
      )
      (when (and (and (= guard-shot-option #t)(= guard-shot-int 3)))          ;guard-shot
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start-g #t)
      )
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
      (when (and (and (= predator-shot-option #t)(= predator-shot-int 3)))      ;predator-shot (DEPRECATED)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
      )
      (when (and (and (= double-tap-option #t) (= double-tap-int 3) (rand-vu-percent? 0.2)))         ;double-tap
        (set! dt-frame-start #t)
      )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 3)(rand-vu-percent? 0.0125)))    ;chanced-extra-peacemaker-shot
        (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )                                                                                                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    )
  )
  )
  (when (= rapid-fire-blue-frame 10)
    (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> *target* entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> gp-0 fire-point quad))
      (set! (-> s4-1 vel quad) (-> s5-0 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (when (= rapid-fire-int 3)
        (set! rapid-fire-blue #t)
      )
            (when (and (!= guard-grenade-int 3)(!= guard-shot-int 3)) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WEAPON MOD CHANGES OCCUR HERE AND DOWN
        (spawn-projectile gun-blue-shot s4-1 (ppointer->process (-> gp-0 gun)) *default-dead-pool*)
      )
      (when (and (= guard-grenade-int 3)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
      )
      (when (and (= leg-random-int 3)(= leg-random-shot #t))                                    ;random shot
        (set! wm-rand-shot #t)
      )
      (when (and (and (= guard-shot-option #t)(= guard-shot-int 3)))          ;guard-shot
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start-g #t)
      )
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
      (when (and (and (= predator-shot-option #t)(= predator-shot-int 3)))      ;predator-shot (DEPRECATED)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
      )
      (when (and (and (= double-tap-option #t) (= double-tap-int 3) (rand-vu-percent? 0.2)))         ;double-tap
        (set! dt-frame-start #t)
      )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 3)(rand-vu-percent? 0.0125)))    ;chanced-extra-peacemaker-shot
        (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )                                                                                                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    )
  )
  )
  (when (= rapid-fire-blue-frame 15)
    (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> *target* entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> gp-0 fire-point quad))
      (set! (-> s4-1 vel quad) (-> s5-0 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (when (= rapid-fire-int 3)
        (set! rapid-fire-blue #t)
      )
            (when (and (!= guard-grenade-int 3)(!= guard-shot-int 3)) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WEAPON MOD CHANGES OCCUR HERE AND DOWN
        (spawn-projectile gun-blue-shot s4-1 (ppointer->process (-> gp-0 gun)) *default-dead-pool*)
      )
      (when (and (= guard-grenade-int 3)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
      )
      (when (and (= leg-random-int 3)(= leg-random-shot #t))                                    ;random shot
        (set! wm-rand-shot #t)
      )
      (when (and (and (= guard-shot-option #t)(= guard-shot-int 3)))          ;guard-shot
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start-g #t)
      )
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
      (when (and (and (= predator-shot-option #t)(= predator-shot-int 3)))      ;predator-shot (DEPRECATED)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
      )
      (when (and (and (= double-tap-option #t) (= double-tap-int 3) (rand-vu-percent? 0.2)))         ;double-tap
        (set! dt-frame-start #t)
      )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 3)(rand-vu-percent? 0.0125)))    ;chanced-extra-peacemaker-shot
        (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )                                                                                                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    )
  )
    (set! rapid-fire-blue-frame 0)
    (set! rapid-fire-blue #f)
  )
)



(when (and (= guard-shot-int 1)(= guard-grenade-int 1))
  (set! error-hint #t)
  (set! error-start #t)
  (set! guard-shot-int 0)
  (set! guard-grenade-int 0)
)
(when (and (= guard-shot-int 2)(= guard-grenade-int 2))
  (set! error-hint #t)
  (set! error-start #t)
  (set! guard-shot-int 0)
  (set! guard-grenade-int 0)
)
(when (and (= guard-shot-int 3)(= guard-grenade-int 3))
  (set! error-hint #t)
  (set! error-start #t)
  (set! guard-shot-int 0)
  (set! guard-grenade-int 0)
)
(when (and (= guard-shot-int 4)(= guard-grenade-int 4))
  (set! error-hint #t)
  (set! error-start #t)
  (set! guard-shot-int 0)
  (set! guard-grenade-int 0)
)




 ;This counts invulnerable frames for when jak fires a projectile that could damage him. This is for predator shot.
(when (and (= (paused?) #f)(not *scene-player*)(= (pause-allowed?) #t)(!= (-> *target* fact health) 0.0)(= inv-frame-start #t))
  (+! inv-frame-counter 1)
  (logior! (-> *game-info* secrets) (game-secrets invulnerable))
  (when (>= inv-frame-counter 2)
    (logclear! (-> *game-info* secrets) (game-secrets invulnerable))
    (set! inv-frame-counter 0)
    (set! inv-frame-start #f)
    )


)
;same thing as above, but for guard-shot / guard-grenade
(when (and (= (paused?) #f)(not *scene-player*)(= (pause-allowed?) #t)(!= (-> *target* fact health) 0.0)(= inv-frame-start-g #t))
  (+! inv-frame-counter-g 1)
  (logior! (-> *game-info* secrets) (game-secrets invulnerable))
  (when (>= inv-frame-counter-g 10)
    (logclear! (-> *game-info* secrets) (game-secrets invulnerable))
    (set! inv-frame-counter-g 0)
    (set! inv-frame-start-g #f)
    )

)



    (when (= mod-all-yellow #t) ;these chunks will set all gun mods to one weapon. Be careful lol         EXAMPLE:         (set! mod-all-yellow #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 1)
      (set! double-tap-option #t)
      (set! double-tap-int 1)
      (set! infinite-range-option #t)
      (set! infinite-range-int 1)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 1)
      (set! predator-shot-option #t)
      (set! predator-shot-int 1)
      (set! guard-shot-option #t)
      (set! guard-shot-int 1)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-yellow #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-blue #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 3)
      (set! double-tap-option #t)
      (set! double-tap-int 3)
      (set! infinite-range-option #t)
      (set! infinite-range-int 3)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 3)
      (set! predator-shot-option #t)
      (set! predator-shot-int 3)
      (set! guard-shot-option #t)
      (set! guard-shot-int 3)
      (set! mod-all-off #f)
      (set! mod-all-yellow #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-blue #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-red #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 2)
      (set! double-tap-option #t)
      (set! double-tap-int 2)
      (set! infinite-range-option #t)
      (set! infinite-range-int 2)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 2)
      (set! predator-shot-option #t)
      (set! predator-shot-int 2)
      (set! guard-shot-option #t)
      (set! guard-shot-int 2)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-yellow #f)
      (set! mod-all-dark #f)
      (set! mod-all-red #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-dark #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 4)
      (set! double-tap-option #t)
      (set! double-tap-int 4)
      (set! infinite-range-option #t)
      (set! infinite-range-int 4)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 4)
      (set! predator-shot-option #t)
      (set! predator-shot-int 4)
      (set! guard-shot-option #t)
      (set! guard-shot-int 4)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-yellow #f)
      (set! mod-all-dark #f)
      (set! mod-turning-off #t)
    )
    (when (and (= mod-all-off #t) (= mod-turning-off #t))
      (set! rapid-fire-option #f)
      (set! rapid-fire-int 0)
      (set! double-tap-option #f)
      (set! double-tap-int 0)
      (set! infinite-range-option #f)
      (set! infinite-range-int 0)
      (set! pm-extra-shot-option #f)
      (set! pm-extra-shot-int 0)
      (set! predator-shot-option #f)
      (set! predator-shot-int 0)
      (set! guard-shot-option #t)
      (set! guard-shot-int 0)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-yellow #f)
      (set! mod-turning-off #f)
    )



      (when (and (= test-option #t) (rand-vu-percent? 0.05)) ;debug projectile, you can enable to do absolutely nothing but have a chance to shoot a projectile every frame or so
        (print "test")
        )




;                    Peacemaker Ability
;---------------------------------------------------------
;(vector-rotate-y! svec-pos svec-pos 3.0) ;possible line for enlarging the radius of gun-point, possible fix for invulnerability turning off game secrets.

  (when (and (= peacemaker-ability #t)(= in-menu #f)(= on-table? #f)(not *scene-player*)(= (paused?) #f)(rand-vu-percent? 0.000006)(> (-> *target* fact health) 0.0))
    (set! pm-shot-trigger #t)
  )

  (if (and (and (= peacemaker-ability #t)(rand-vu-percent? 0.25)(= pm-shot-trigger #t))) ;
    (let ((svec-pos (new-stack-vector0))
    (tpoz (-> *target* gun fire-point)))
    (vector-rotate-y! svec-pos svec-pos 90.0)
      (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
        (vector-copy! (-> gp-0 pos) (vector+! svec-pos tpoz pm-offset-y))
        (set! (-> gp-0 ent) (-> *target* entity))
        (set! (-> gp-0 charge) (-> s5-0 fire-charge))
        (set! (-> gp-0 options) (projectile-options))
        (set! (-> gp-0 pos quad) (-> svec-pos quad))
        (set! (-> gp-0 vel quad) (-> svec-pos quad))
        (set! (-> gp-0 notify-handle) (the-as handle #f))
        (set! (-> gp-0 owner-handle) (the-as handle #f))
        (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
        (set! (-> gp-0 timeout) (seconds 4))
        (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
          (when v0-1
            (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
            (+! pm-shot-counter 1)
            (when (= pm-shot-counter 120)
              (set! pm-shot-trigger #f)
              (set! pm-shot-counter 0)
              (if (= gun-dark-present? #t)
                (set! (-> *game-info* features) (game-feature gun board sidekick gun-dark gun-yellow gun-red gun-blue))
                    )

                )
              )
              v0-1
            )
          )
        )
    )

;                    Teleport to final boss
;---------------------------------------------------------
      ;INFO
;tp-fb is the whole TeleportJakToFinalBoss Mod.
;All of the variables set are for time-based events that measure off of frames |

  (when (and (= jakisntdead #f)(= (pause-allowed?) #t)(!= (-> *target* fact health) 0.0)) ;when jak alive
    (set! jakisntdead #t)
    (set! already-died? #f)
  )
  (when (and (= jakisntdead #t)(= (pause-allowed?) #t)(= (-> *target* fact health) 0.0)) ;when jak dead
    (set! jakisntdead #f)
  )

  (when (and (not *scene-player*)(= (pause-allowed?) #t)(= stored-cp? #f)(= already-died? #f)(= start-death-timer-i #f)(= jakisntdead #f))
    (set! start-death-timer-i #t)
  )

  (when (= start-frame-count #t)
    (+! frame-count 1)
  )


  (when (= start-death-timer-i #t)
    (+! death-timer-i 1)
    (when (= death-timer-i 120)
      (set! start-death-timer-i #f)
      (set! death-timer-i 0)
      (set! already-died? #t)
    )
  )






  (when (and (= already-died? #f)(= jakisntdead #f)(= stored-cp? #f)(= tp-fb #t)(!= (-> *game-info* fuel) 10.0)(rand-vu-percent? 0.007)) ;looks for teleport percentage (IN NORMAL) upon death, if so, init tp-fb
    (set! start-frame-count #t)
    (set! stored-cp? #t)
    (set! new-game-s? #t)
    (when (= (-> *progress-state* which-slot) 0)
      (set! load-state-tp 0)
    )
    (when (= (-> *progress-state* which-slot) 1)
      (set! load-state-tp 1)
    )
    (when (= (-> *progress-state* which-slot) 2)
      (set! load-state-tp 2)
    )
    (when (= (-> *progress-state* which-slot) 3)
      (set! load-state-tp 3)
    )

    (print "[MOD] Started tp-fb, Autosaving User...
")
  )
  (when (and (= already-died? #f)(= jakisntdead #f)(= stored-cp? #f)(= tp-fb #t)(= (-> *game-info* fuel) 10.0)(rand-vu-percent? 0.0016)) ;(0.0016)looks for teleport percentage (IN HEROMODE) upon death, if so, init tp-fb
    (set! start-frame-count #t)
    (set! stored-cp? #t)
    (set! new-game-s? #t)
    (set! in-hellmode-tpfb #t)
    (when (= (-> *progress-state* which-slot) 0)
      (set! load-state-tp 0)
    )
    (when (= (-> *progress-state* which-slot) 1)
      (set! load-state-tp 1)
    )
    (when (= (-> *progress-state* which-slot) 2)
      (set! load-state-tp 2)
    )
    (when (= (-> *progress-state* which-slot) 3)
      (set! load-state-tp 3)
    )

    (print "[MOD] Started tp-fb, Autosaving User...
")
  )

  (when (and (and (= frame-count 10)(= new-game-s? #t)(= stored-cp? #t))) ;sets all your gunmod attributes, starts a new game
    (initialize! *game-info* 'game (the-as game-save #f) "prison")
    (set! mission-grab-1 #t)
    (set! mission-grab-2 #t)
    (set! mission-grab-3 #t)
    (set! mission-grab-4 #t)
    (set! weapon-mod-toggle #f)
    (set! rapid-fire-option #f)
    (set! double-tap-option #f)
    (set! guard-shot-option #f)
    (set! predator-shot-option #f)
    (set! guard-grenade-option #f)
    (set! leg-random-shot #f)
    (set! pm-extra-shot-option #f)
    (set! mag-bag-option #f)
    (set! mehrunes-shot-option #f)
    (set! guard-shot-int 0)
    (set! guard-grenade-int 0)
    (print "[MOD] Set gun-mod parameters, Started NEW GAME.
")
  )
(when (and (and (= frame-count 30)(= new-game-s? #t)(= stored-cp? #t)))
    (send-event *target* 'continue (get-continue-by-name *game-info* "nestb-boss-pit"))
    (print "[MOD] Set 'play for nestb-boss-pit")
  )
  (when (and (and (= frame-count 40)(= new-game-s? #t)(= stored-cp? #t))) ;starts after a little bit to avoid crashes, teleports jak to final boss spawnpoint and sets the game task
    (play-task (game-task nest-boss) 'debug #f)
    ;(set! pause-menu-blocked? #t)
    (when (= hell-mode-option #t)
      (set! (-> *game-info* fuel) 10.0)
      (print "[MOD] Hellmode #t, good luck during this fight }:)
")
    )
    (when (= hell-mode-option #f)
      (set! (-> *game-info* fuel) 2.0)
      (print "[MOD] Hellmode #f, tp-fb by it*target* is set!
")
    )
    (set! start-frame-count #f)
    (set! frame-count 0)
    (set! going-back-tp #t)
    (set! (-> *setting-control* user-current allow-pause) #f)
    (print "[MOD] teleport success
")
    ;(set! (-> *game-info* features) (game-feature board board-training sidekick gun-yellow gun-red gun-blue gun-dark gun-upgrade-speed gun-upgrade-ammo gun-upgrade-damage pass-red pass-green pass-yellow darkjak-bomb0 darkjak-bomb1 darkjak-invinc))
  )

  (when (and (= going-back-tp #t)(= tp-fb-win #f)(= start-frame-count #f)(= tp-fb #t)(< (-> *target* fact health) 1)) ;starts when jak dies again, while in the final boss stage
    (set! start-frame-count #t)
    (set! new-game-s? #f)
    (print "[MOD] started frame-count for game-save load
")
  )
  (when (and (= frame-count 60)(= tp-fb-win #f)(= going-back-tp #t)) ;loads the save you had after 60 frames of DEATH
    (auto-save-command 'restore 0 load-state-tp *default-pool* #f)
    (print "[MOD] crash?
")
  )
  (when (and (= going-back-tp #t)(= tp-fb-win #f)(> frame-count 80)(= (pause-allowed?) #t)) ;resets everything back to original state AFTER the game-load, to avoid crashes.
    (if (= in-hellmode-tpfb #t)
      (set! hell-mode-option #t)
      (set! hell-mode-option #f)
    )
    (when (= hell-mode-option #t)
      (set! (-> *game-info* fuel) 10.0)
      (set! rapid-fire-option #t)
      (set! double-tap-option #t)
      (set! guard-shot-option #t)
      (set! guard-grenade-option #t)
      (set! mission-grab-1 #t)
      (set! mission-grab-2 #t)
      (set! mission-grab-3 #t)
      (set! mission-grab-4 #t)
    )
    (when (= hell-mode-option #f)
      (set! (-> *game-info* fuel) 2.0)
      (set! mission-grab-1 #f)
      (set! mission-grab-2 #f)
      (set! mission-grab-3 #f)
      (set! mission-grab-4 #f)
    )
    (set! weapon-mod-toggle #t)
    (print "[MOD] You died!! POGGERS!!! (PLAQUE:) I logged 42 hours on this particular problem alone ;-;
")
    (set! pickup-save #f)
    (set! pickup-frame 0)
    (+! (-> *game-info* total-deaths) 1)
    (set! auto-save-delayed? #t)
    (set! stored-cp? #f)
    (set! going-back-tp #f)
    (set! start-frame-count #f)
    (set! pause-menu-blocked? #f)
    (set! in-hellmode-tpfb #f)
    (set! frame-count 0)
  )

  (when (and (= stored-cp? #t)(= tp-fb-win #t))   ;runs after winning the final boss fight in tp-fb
    (set! start-frame-count #t)
    (set! new-game-s? #f)
    (when (and (= stored-cp? #t)(= frame-count 1))
      (auto-save-command 'restore 0 load-state-tp *default-pool* #f)
    )

    (when (and (= stored-cp? #t)(= frame-count 120)) ;gives you corresponding modifiers from your save, then adding the legendary depending on whether or not in hell-mode.
      (set! stored-cp? #f)
      (set! pause-menu-blocked? #f)
      (set! start-frame-count #f)
      (set! frame-count 0)
      (set! going-back-tp #f)
      (set! weapon-mod-toggle #t)
      (set! mission-grab-1 #f)
      (set! mission-grab-2 #f)
      (set! mission-grab-3 #f)
      (set! mission-grab-4 #f)
      (set! pickup-save #f)
      (set! pickup-frame 0)
      (set! auto-save-delayed? #t)
      (when (= in-hellmode-tpfb #f)
        (print "[MOD] | LEGENDARY | You beat tp-fb on normal and recieved Weapon Mod pm-extra-shot! tp-fb is now disabled, rerolling modifier.
")
        (set! (-> *game-info* buzzer-total) 1.0)
        (+! (-> *game-info* gem) 30.0)
        (set! mod-pick #t)
        (set! popup-tpfb-n #t)
      )
      (when (= in-hellmode-tpfb #t)
        (set! (-> *game-info* fuel) 10.0)
        (+! (-> *game-info* gem) 30.0)
        (print "[MOD] | LEGENDARY | You beat tp-fb in HELL MODE! Congratulations!! You recieved Weapon Mods Blast Shot, and Peacemaker Shot! tp-fb is now disabled.
")
        (set! hell-mode-option #f)
        (set! (-> *game-info* buzzer-total) 6.0)
        (set! popup-tpfb-h #t)
        (set! rapid-fire-option #t)
        (set! double-tap-option #t)
        (set! guard-shot-option #t)
        (set! guard-grenade-option #t)
      )
      (set! in-hellmode-tpfb #f)
    )
  )

(when (= pause-menu-blocked? #t)
  (set-master-mode 'game)
)

(when (= auto-save-delayed? #t)
  (+! auto-save-frame 1)
  (when (= auto-save-frame 60)
    (auto-save-user)
    (set! auto-save-frame 0)
    (set! auto-save-delayed? #f)
  )
)

(when (and *target* (not *scene-player*))
  (when (and (= stored-cp? #f)(= ohshitfirsttime #f)(= ohshit #f)(= pickup-save #t))
    (when (and (<= pickup-frame 600)(!= (-> *target* fact health) 0.0)(= (paused?) #f))
      (+! pickup-frame 1)
    )
    (when (= pickup-frame 600)
      (set! auto-save-delayed? #t)
      (set! pickup-save #f)
      (set! pickup-frame 0)
    )
  )
)


;trip-metalheads function
;--------------------------------------------

  (when (and (or (cpad-pressed? 0 l1)(cpad-pressed? 0 x)(cpad-pressed? 0 square)(cpad-pressed? 0 circle))(rand-vu-percent? 0.008)(= trip-metalheads #t))
    (send-event *target* 'loading)
    (set! trip-start #t)
    (when (and (send-event *target* 'loading)(= trip-cooldown 0))
      (+! (-> *game-info* gem) 25.0)
      (set! trip-start #f)
      (set! trip-cooldown 8000)
    )
  )

  (when (= trip-start #t)
    (when (> trip-cooldown 0)
      (-! trip-cooldown 1)
    )
  )

;target-explode



(when (= target-explode-start #t)
  (set! explode-fstart #t)
  (set! target-explode-start #f)
)

(when (= targetec-start #t)
  (+! targetec-count 1)
  (when (= targetec-count 1)
  )
  (when (= targetec-count 5)
    (set! targetec-start #f)
    (set! targetec-count 0)
  )
)

(when (= explode-fstart #t)
  (+! explode-f 1)
  (when (= (-> *target* fact health) 0.0)
    (set! explode-fstart #f)
    (set! explode-f 0)
  )
  (when (= explode-f 1)
    (set! r-bomb-setoff (rand-vu-int-range 1 3))
  )
  (when (= explode-f 10)

    (when (= r-bomb-setoff 1)
      (play-sound-file bomb-setoffp 100)
    )
    (when (= r-bomb-setoff 2)
      (play-sound-file bomb-setoffp2 100)
    )
    (when (= r-bomb-setoff 3)
      (play-sound-file bomb-setoffp3 100)
    )
  )
  (when (= explode-f 70)
    (play-sound-file bomb-explodep 100)
    (send-event *target* 'draw #f)
    (send-event *target* 'attack-invinc #f (static-attack-info ((id (new-attack-id)) (mode 'big-explosion))))
  )
  (when (= explode-f 120)
    (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
    (set! explode-fstart #f)
    (set! explode-f 0)
  )
)


(when (and (or (= target-explode #t)(= ohshitfirsttime #t))(= gungame-ammorefill #f)(= (-> (level-get-target-inside *level*) name) 'gungame) (not (= (-> (level-get-target-inside *level*) name) 'ctywide)))
  (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
  (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
  (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
  (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
  (set! gungame-ammorefill #t)
  (set! popup3-start #t)
  (sound-play "ammo-pickup")
)

(when (and (= gungame-ammorefill #t)(not (= (-> (level-get-target-inside *level*) name) 'gungame)))
  (set! gungame-ammorefill #f)
)


;start mushroom-movies



(when *scene-player*
    (when (and (= mushroom-movies-start #f)(rand-vu-percent? 0.03)(= mushroom-movies #t)
      (set! mushroom-movies-start #t)
      (set! mushroom-var (rand-vu-int-range 1 6))
    )
  )
)





;(logior! (cpad-pressed 0) (pad-buttons l1))
;(logior! (cpad-pressed 0) (pad-buttons r1))





;COLORS FOR JAK
;(set! (-> *target* draw color-mult x) (+ 0.0)) ;red
;(set! (-> *target* draw color-mult y) (+ 0.0)) ;green
;(set! (-> *target* draw color-mult z) (+ 0.0)) ;blue







;city-guard-turret spawn params
;----------------------------------------------------------------
(when (= spawntheturrets #t)
  (when (and (or (not (task-node-closed? (game-task-node city-power-vinroom)))(task-node-closed? (game-task-node city-power-post-win)))(= (-> (level-get-target-inside *level*) name) 'ctysluma) (= spawned-turret-hideout? #f))
    (set! spawned-turret-hideout? #t)
    (print "HIDEOUT TURRET SET TO TRUE")
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 1121.6390) :y (meters 8) :z (meters 14.6835) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 1094.4657) :y (meters 7.9) :z (meters 310.0290) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 942.4657) :y (meters 7.9) :z (meters 443.0290) :w 1.0))
  )
  (when (and (!= (-> (level-get-target-inside *level*) name) 'ctysluma) spawned-turret-hideout? #t)
    (set! spawned-turret-hideout? #f) 
    (print "HIDEOUT TURRET SET TO FALSE")
  )
  (when (and (or (not (task-node-closed? (game-task-node city-power-vinroom)))(task-node-closed? (game-task-node city-power-post-win)))(= (-> (level-get-target-inside *level*) name) 'ctyport) (= spawned-turrets-port? #f))
    (set! spawned-turrets-port? #t)
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -98.2844) :y (meters 7.9) :z (meters 1381.2529) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -13.494) :y (meters 7.9) :z (meters 1324.7672) :w 1.0))
    (print "PORT TURRETS SET TO TRUE")
  )
    (when (and (!= (-> (level-get-target-inside *level*) name) 'ctyport) spawned-turrets-port? #t)
    (set! spawned-turrets-port? #f) 
    (print "PORT TURRETS SET TO FALSE")
  )
  (when (and (or (not (task-node-closed? (game-task-node city-power-vinroom)))(task-node-closed? (game-task-node city-power-post-win)))(= (-> (level-get-target-inside *level*) name) 'ctypal) (= spawned-turrets-pal? #f))
    (set! spawned-turrets-pal? #t)
    (print "PALACE TURRETS SET TO TRUE")
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 191.8888) :y (meters 7.9) :z (meters 888.5129) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 375.8006) :y (meters 16) :z (meters 696.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 192.8006) :y (meters 7.9) :z (meters 774.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -8.8006) :y (meters 16) :z (meters 688.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 197.8006) :y (meters 16) :z (meters 398.1273) :w 1.0))
  )
    (when (and (!= (-> (level-get-target-inside *level*) name) 'ctypal) spawned-turrets-pal? #t)
    (set! spawned-turrets-pal? #f) 
    (print "PALACE TURRETS SET TO FALSE")
  )
    (when (and (or (not (task-node-closed? (game-task-node city-power-vinroom)))(task-node-closed? (game-task-node city-power-post-win)))(= (-> (level-get-target-inside *level*) name) 'ctymarka) (= spawned-turret-market? #f))
    (set! spawned-turret-market? #t)
    (print "MARKET TURRET SET TO TRUE")
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -301.8006) :y (meters 7.9) :z (meters 243.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -301.8006) :y (meters 8.1) :z (meters 235.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -301.8006) :y (meters 8.3) :z (meters 229.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -301.8006) :y (meters 8.1) :z (meters 223.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -301.8006) :y (meters 7.9) :z (meters 215.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -362.8006) :y (meters 7.9) :z (meters 209.1273) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters -319.4657) :y (meters 7.9) :z (meters 715.0290) :w 1.0))
  )
    (when (and (!= (-> (level-get-target-inside *level*) name) 'ctymarka) spawned-turret-market? #t)
    (set! spawned-turret-market? #f) 
    (print "MARKET TURRET SET TO FALSE")
  )
      (when (and (or (not (task-node-closed? (game-task-node city-power-vinroom)))(task-node-closed? (game-task-node city-power-post-win)))(= (-> (level-get-target-inside *level*) name) 'ctyinda) (= spawned-turret-vin? #f))
    (set! spawned-turret-vin? #t)
    (print "VIN TURRET SET TO TRUE")
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 778.7822) :y (meters 7.9) :z (meters 1100.5985) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 821.7822) :y (meters 7.9) :z (meters 1130.5985) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 938.7822) :y (meters 7.9) :z (meters 1103.8018) :w 1.0))
    (process-spawn cty-guard-turret (new 'static 'vector :x (meters 932.7822) :y (meters 7.9) :z (meters 1103.8018) :w 1.0))
  )
    (when (and (!= (-> (level-get-target-inside *level*) name) 'ctyinda) spawned-turret-vin? #t)
    (set! spawned-turret-vin? #f) 
    (print "VIN TURRET SET TO FALSE")
  )

)









;literally all the rest of this and down is just the menu functions, and draw menu functions.





















;PLAYABLE BLACKJACK AT HIPHOG WITH GEMS IN DEBUGGER:

(when (= bj-start #t)
  (+! bj-count 1)
  (set! in-transition? #t)
  (when (= bj-count 1)
    (play-sound-file "data/goal_src/jak2/pc/snd/doo-doh.wav" 80)
  )
  (when (= bj-count 60)
    (set! no-state-camera-table #t)
    (set! in-hiphog? #t)
    (set! bj-count 0)
    (set! bj-start #f)
    (set! in-transition? #f)
  )
)

;POPUP MENU
(when (and (or (= (-> *game-info* fuel) 10.0) (task-node-closed? (game-task-node tomb-boss-resolution)))(not (task-node-open? (game-task-node city-whack-resolution)))(= on-table? #f)(not (cpad-pressed? 0 r3))(not *scene-player*) (= (paused?) #f)(= in-granger? #f)(= weapon-mod-toggle #t)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3:<COLOR_PINK> Play Eco War"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;CONTROLS FOR ALL STATES
(when (and (not *scene-player*)(or (= (-> *game-info* fuel) 10.0) (task-node-closed? (game-task-node tomb-boss-resolution))) (= (paused?) #f)(= weapon-mod-toggle #t))
  (when (and (cpad-pressed? 0 r3)(= in-hiphog? #f)(= (-> (level-get-target-inside *level*) name) 'hiphog)) ;enter table
    (set! pause-menu-blocked? #t)
    (set! bj-start #t)
    (send-event *target* 'draw #f)
    (process-grab? *target* #f)
    (set-vector! (-> *target* control trans) (meters -82.0494) (meters 10.853) (meters 1283.3468) 1.0) ;teleports jak under table
    (set! on-table? #t)
    (print "Welcome to the Table!")
    (print "Choose your Dealer (left/right):")
  )
  (when (and (cpad-pressed? 0 triangle)(= in-hiphog? #t)(= (-> (level-get-target-inside *level*) name) 'hiphog)) ;exit table
    (set-vector! (-> *target* control trans) (meters -86.7356) (meters 14.2) (meters 1291.5367) 1.0); makes jak appear next to table
    (set! no-state-camera-table #f)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (send-event *target* 'draw #t)
    (process-release? *target*)
    (set! in-hiphog? #f)
    (set! in-pre-game? #f)
    (set! in-blackjack? #f)
    (set! bj-start #f)
    (set! bj-count 0)
    (set! round-started? #f)
    (set! added-cards-dealer 0)
    (set! added-cards-jak 0)
    (set! jak-current-card 0)
    (set! dealer-current-card 0)
    (set! bid-amount 0.0)
    (set! bid-select 0)
    (set! bj-win #f)
    (set! bj-lose #f)
    (set! char-on-table 1)
    (set! pause-menu-blocked? #f)
    (set! win-count 0)
    (set! lose-count 0)
    (set! hitting? #f)
    (set! dealer-stay #f)
    (set! bj-double-down #f)
    (set! on-table? #f)
    (set! jcard1 #f)
    (set! jcard1i 0)
    (set! jcard2 #f)
    (set! jcard2i 0)
    (set! jcard3 #f)
    (set! jcard3i 0)
    (set! jcard4 #f)
    (set! jcard4i 0)
    (set! dcard1 #f)
    (set! dcard1i 0)
    (set! dcard2 #f)
    (set! dcard2i 0)
    (set! dcard3 #f)
    (set! dcard3i 0)
    (set! dcard4 #f)
    (set! dcard4i 0)
    (set! jturn 0)
    (set! dturn 0)
    (set! jackpot-win #f)
    (set! jackpotbaby #f)
    (set! jackpotbabytime 0)
    (set! bj-bid-s "0")
    (set! bj-dealer-s "Sig")
    (print "Exited Table!")
  )


  (when (= no-state-camera-table #t) ;is given no state and is invisible, tp's target inside of table
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters -80.2473) :y (meters 14.0607) :z (meters 1286.0913)))
  )

(when (= sp-start #t)
  (+! sp-int 1)
  (when (= sp-int 10)
    (let ((start-rand 0))

      (when (= char-on-table 1)
        (print "Set character to Sig!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 17)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Sig")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-start2.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (print "Set character to Krew!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 18)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Krew")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-start2.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (print "Set character to Torn!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 16)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Torn")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-start.mp3" 100)
        )
      )
      (when (= char-on-table 4)
        (print "Set character to Ashelin!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 17)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Ashelin")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-start.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (print "Set character to Pecker!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 15)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Pecker")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-start.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (print "Set character to Jinx!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 16)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Jinx")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-start2.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (print "Set character to Errol!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 19)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Errol")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-start2.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (print "Set character to Daxter!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 20)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Daxter")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-start.mp3" 100)
        )
      )
      (when (= char-on-table 9)
        (print "Set character to Mute!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! current-dealer "Muted")
        (set! dealer-cap 17)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 100)
      )
    )
    (set! sp-int 0)
    (set! sp-start #f)
  )
)

  (when (and (= in-pre-game? #t)(= in-hiphog? #t)(= in-blackjack? #f)(cpad-pressed? 0 x)) ;select x pick bid-screen
      (set! table-activate #t)
      (when (and (= bid-select 1)(>= (-> *game-info* gem) 5.0))
        (set! bid-current 10.0)
        (print "set bid amount to 5
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 5.0)
        (set! bid-amount 5.0)
        (set! auto-save-delayed? #t)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (= bid-select 2)(>= (-> *game-info* gem) 10.0))
        (set! bid-current 20.0)
        (print "set bid amount to 10
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 10.0)
        (set! bid-amount 10.0)
        (set! auto-save-delayed? #t)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 25.0)(= bid-select 3))
        (set! bid-current 50.0)
        (print "set bid amount to 25
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 25.0)
        (set! bid-amount 25.0)
        (set! auto-save-delayed? #t)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 50.0)(= bid-select 4))
        (set! bid-current 100.0)
        (print "set bid amount to 50
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 50.0)
        (set! bid-amount 50.0)
        (set! auto-save-delayed? #t)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 100.0)(= bid-select 5))
        (set! bid-current 200.0)
        (print "set bid amount to 100
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 100.0)
        (set! bid-amount 100.0)
        (set! auto-save-delayed? #t)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 1000.0)(= bid-select 6))
        (set! bid-current 2000.0)
        (print "set bid amount to 1000
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 1000.0)
        (set! bid-amount 1000.0)
        (set! auto-save-delayed? #t)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
    )

  (when (and (= in-pre-game? #t) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 left)) ;select left bid-screen
    (-! bid-select 1)
    (when (< bid-select 0)
      (set! bid-select 0)
    )
    (set! table-activate #t)
  )


  (when (and (= in-pre-game? #t) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 right)) ;select right bid-screen
    (+! bid-select 1)
    (when (and (and (!= (-> *game-info* task-deaths) 3)(!= (-> *game-info* task-deaths) 4))(>= bid-select 6))
      (set! bid-select 5)
    )
    (when (and (>= bid-select 7))
      (set! bid-select 6)
    )
    (set! table-activate #t)
  )

  (when (and (= in-pre-game? #f)(= in-hiphog? #t)(= in-blackjack? #f)(cpad-pressed? 0 x)) ;select X pick your character 
      (set! table-activate #t)
      (set! sp-start #t)
      (set! in-pre-game? #t)
  )

  (when (and (= in-pre-game? #f) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 left)) ;select left pick your character
    (-! char-on-table 1)
    (when (<= char-on-table 0)
      (set! char-on-table 1)
    )
    (set! table-activate #t)
  )


  (when (and (= in-pre-game? #f) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 right)) ;select right pick your character
    (+! char-on-table 1)
    (when (and (cpad-pressed? 0 right)(>= char-on-table 10))
      (set! char-on-table 9)
    )
    (set! table-activate #t)
  )

;(the int (-> *setting-control* user-current sfx-volume))
(when (= bj-lose #t) ;you suck
  (+! lose-count 1)
  (set! in-hiphog? #f)
  (set! dcard2 #t)
  (set! jcard3 #t)
  (set! jcard4 #t)
  (when (= lose-count 10)
    (let ((rand-sound 0))
      (when (= char-on-table 1)
        (set! rand-sound (rand-vu-int-range 1 4))                                                      ;For Losing
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win2.mp3"100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win4.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (set! rand-sound (rand-vu-int-range 1 6))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win6.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-win.mp3" 74)
        )
      )
      (when (= char-on-table 4)
        (set! rand-sound (rand-vu-int-range 1 7))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win7.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (set! rand-sound (rand-vu-int-range 1 7))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win7.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (set! rand-sound (rand-vu-int-range 1 8))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win2.mp3"100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win7.mp3" 100)
        )
        (when (= rand-sound 8)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win8.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (set! rand-sound (rand-vu-int-range 1 7))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win7.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 8))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win7.mp3" 100)
        )
        (when (= rand-sound 8)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win8.mp3" 100)
        )
      )
    )
  )
  (when (and (rand-vu-percent? 0.4)(= lose-count 150))
    (let ((rand-sound 0))
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 3))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jak-lose-againstdaxter.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jak-lose-againstdaxter2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/jak-lose-againstdaxter2.mp3" 100)
        )
      )
    )
  )
  (when (and (= lose-count 300))                                                     ;For Again?
    (let ((rand-sound 0))
    (when (rand-vu-percent? 0.5)
      (when (= char-on-table 1)
        (set! rand-sound (rand-vu-int-range 1 3))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-again2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-again3.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-again2.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-again.mp3" 100)
        )
      )
      (when (= char-on-table 4)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-again.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-again.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-again.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-again2.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-again.mp3" 100)
        )
      )
    )
    )
    (set! in-hiphog? #t)
    (set! in-blackjack? #f)
    (set! round-started? #f)
    (set! added-cards-dealer 0)
    (set! added-cards-jak 0)
    (set! jak-current-card 0)
    (set! dealer-current-card 0)
    (set! bid-amount 0.0)
    (set! bid-select 0)
    (set! bj-win #f)
    (set! bj-lose #f)
    (set! bj-hit #f)
    (set! bj-stay #f)
    (set! lose-count 0)
    (set! hitting? #f)
    (set! dealer-stay #f)
    (set! bj-double-down #f)
    (set! jcard1 #f)
    (set! jcard1i 0)
    (set! jcard2 #f)
    (set! jcard2i 0)
    (set! jcard3 #f)
    (set! jcard3i 0)
    (set! jcard4 #f)
    (set! jcard4i 0)
    (set! dcard1 #f)
    (set! dcard1i 0)
    (set! dcard2 #f)
    (set! dcard2i 0)
    (set! dcard3 #f)
    (set! dcard3i 0)
    (set! dcard4 #f)
    (set! dcard4i 0)
    (set! jturn 0)
    (set! dturn 0)
    (set! bj-bid-s "0")
    (set! bj-dealer-s "Sig")
    (set! jackpot-win #f)
    (set! jackpotbaby #f)
    (set! jackpotbabytime 0)
    (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 100)
    (print "select bid amount:")
  )
)

(when (= bj-win #t) ;you still stuck cuz its mostly all luck
  (+! win-count 1)
  (when (= win-count 1)
    (play-sound-file "data/goal_src/jak2/pc/snd/win.mp3" 100)
    (set! in-hiphog? #f)
    (set! dcard2 #t)
    (set! jcard3 #t)
    (set! jcard4 #t)
  )
  (when (and (= jackpot-win #t) (= win-count 2))
    (+! (-> *game-info* gem) (*! bid-current 10))
    (set! (-> *game-info* total-trys) 1)
    (set! jackpotbaby #t)
  )
  (when (and (= jackpot-win #f)(= win-count 2))
    (+! (-> *game-info* gem) bid-current)
  )
  (when (= win-count 10)
    (let ((rand-sound 0))
      (set! rand-sound (rand-vu-int-range 1 5))
      (when (= rand-sound 1)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win.mp3" 100)
      )
      (when (= rand-sound 2)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win2.mp3" 100)
      )
      (when (= rand-sound 3)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win3.mp3" 100)
      )
      (when (= rand-sound 4)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win4.mp3" 100)
      )
      (when (= rand-sound 5)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win5.mp3" 100)
      )
      (set! auto-save-delayed? #t)
    )

  )
  (when (and (= win-count 80)(rand-vu-percent? 0.5))
    (let ((rand-sound 0))
      (when (= char-on-table 1)
        (set! rand-sound (rand-vu-int-range 1 2))                                                      ;For Losing
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-lose2.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose4.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (set! rand-sound (rand-vu-int-range 1 4))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose4.mp3" 100)
        )
      )
      (when (= char-on-table 4)
        (set! rand-sound (rand-vu-int-range 1 6))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose6.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (set! rand-sound (rand-vu-int-range 1 3))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-lose.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-lose.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (set! rand-sound (rand-vu-int-range 1 9))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose7.mp3" 100)
        )
        (when (= rand-sound 8)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose8.mp3" 100)
        )
        (when (= rand-sound 9)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose9.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (set! rand-sound (rand-vu-int-range 1 5))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose5.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 4))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose.mp3" 40)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose2.mp3" 60)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose4.mp3" 100)
        )
      )
    )
  )
  (when (= win-count 300)
    (set! in-blackjack? #f)
    (set! in-hiphog? #t)
    (set! round-started? #f)
    (set! added-cards-dealer 0)
    (set! added-cards-jak 0)
    (set! jak-current-card 0)
    (set! dealer-current-card 0)
    (set! bid-amount 0.0)
    (set! bid-select 0)
    (set! win-count 0)
    (set! bj-win #f)
    (set! bj-lose #f)
    (set! bj-stay #f)
    (set! bj-hit #f)
    (set! hitting? #f)
    (set! dealer-stay #f)
    (set! bj-double-down #f)
    (set! jcard1 #f)
    (set! jcard1i 0)
    (set! jcard2 #f)
    (set! jcard2i 0)
    (set! jcard3 #f)
    (set! jcard3i 0)
    (set! jcard4 #f)
    (set! jcard4i 0)
    (set! dcard1 #f)
    (set! dcard1i 0)
    (set! dcard2 #f)
    (set! dcard2i 0)
    (set! dcard3 #f)
    (set! dcard3i 0)
    (set! dcard4 #f)
    (set! dcard4i 0)
    (set! jturn 0)
    (set! dturn 0)
    (set! jackpot-win #f)
    (set! jackpotbaby #f)
    (set! jackpotbabytime 0)
    (set! bj-bid-s "0")
    (set! bj-dealer-s "Sig")
    (print "select bid amount:")
  )
)



                                                                                                                                                    ;BLACKJACK GAME

  (when (and (= hitting? #f) (= in-pre-game? #t) (= in-blackjack? #t) (= in-hiphog? #t) (cpad-pressed? 0 square)) ;play blackjack hit
    (set! bj-hit #t)
    (set! hitting? #t)
  )
  (when (and (= hitting? #f) (= in-pre-game? #t) (= in-blackjack? #t) (= in-hiphog? #t) (cpad-pressed? 0 circle)) ;play blackjack stay
    (set! bj-stay #t)
    (set! hitting? #t)
    (play-sound-file "data/goal_src/jak2/pc/snd/stay.mp3" 100)
  )
  (when (and (>= (-> *game-info* gem) bid-current) (= hitting? #f) (= in-pre-game? #t)  (= in-blackjack? #t) (= in-hiphog? #t) (cpad-pressed? 0 r1)) ;play blackjack double down
    (set! bj-double-down #t)
    (set! hitting? #t)
  )

  (when (and (= hitting? #t)(= in-hiphog? #t))   ;activates once when an option is selected from the three above
    (when (= bj-hit #t)                                                   ;upon jak hit
      (set! jak-current-card (rand-vu-int-range 1 10))
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (+! jturn 1)
      (when (= jturn 3)
        (set! jcard3i jak-current-card)
        (set! jcard3 #t)
      )
      (when (= jturn 4)
        (set! jcard4i jak-current-card)
        (set! jcard4 #t)
        (when (= jackpot-win #t)
          (set! jcard1s "<COLOR_PINK>~d")
          (set! jcard2s "<COLOR_PINK>~d")
          (set! jcard3s "<COLOR_PINK>~d")
          (set! jcard4s "<COLOR_PINK>~d")
        )
      )
      (let ((cnumb 0))
        (set! cnumb (rand-vu-int-range 1 3))
        (when (= cnumb 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/card1.mp3" 100)
        )
        (when (= cnumb 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/card2.mp3" 100)
        )
        (when (= cnumb 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/card3.mp3" 100)
        )
      )
      (when (>= added-cards-jak 22)
        (set! bj-lose #t)
        (print "Bust!")
        (set! dcard2 #t)
      )
      (when (<= added-cards-jak 21)
        (format #t "~%Hit! Recieved a ~d" jak-current-card)
      )
      (set! hitting? #f)
      (set! bj-hit #f)
    )
    (when (= bj-stay #t)                                                   ;upon jak stay
      (set! dh-start #t)
      (when (= dh-start #t)
        (+! d-count 1)
        (when (>= d-count 30)
          (when (<= added-cards-dealer dealer-cap)
        (set! dealer-current-card (rand-vu-int-range 1 10))
        (set! added-cards-dealer (+! added-cards-dealer dealer-current-card))
        (+! dturn 1)
        (when (= dturn 3)
          (set! dcard3i dealer-current-card)
          (set! dcard3 #t)
        )
        (when (= dturn 4)
          (set! dcard4i dealer-current-card)
          (set! dcard4 #t)
        )
        (set! dcard2 #t)
        (set! d-count 0)
      )
      (when (or (>= added-cards-dealer dealer-cap)(> added-cards-dealer added-cards-jak))               ;play dealer stay
        (set! dealer-stay #t)
        (set! bj-stay #f)
        (set! dh-start #f)
      )
      (when (>= added-cards-dealer 22)                                                                 ;play dealer bust
        (set! bj-win #t)
        (set! bj-stay #f)
        (set! dh-start #f)
        (print "Dealer Busts!
")
        (format #t "~%You win ~f!" bid-current)
      )
      (when (>= added-cards-jak 22)                                                                 ;play jak bust
        (set! bj-lose #t)
        (set! bj-stay #f)
        (set! dh-start #f)
        (set! dcard2 #t)
        (print "You Bust!
")
      )
        )
      )
    )
    (when (= bj-double-down #t)
      (*! bid-current 2)
      (-! (-> *game-info* gem) bid-amount)
      (set! jak-current-card (rand-vu-int-range 1 10))
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (set! bj-stay #t)
      (set! bj-double-down #f)
      (set! auto-save-delayed? #t)
      (print "Double Down.")
    )
    (when (= dealer-stay #t)
    (when (and (= dcard3 #f)(= dturn 3))
        (set! dcard3i dealer-current-card)
        (set! dcard3 #t)
      )
      (when (and (= dcard4 #f)(= dturn 4))
        (set! dcard4i dealer-current-card)
        (set! dcard4 #t)
      ) 
      (let ((o #f))
        (when (and (= o #f)(> added-cards-dealer added-cards-jak)(<= added-cards-dealer 21))
          (set! bj-lose #t)
          (print "Dealer Wins!")
          (set! dealer-stay #f)
          (set! o #t)
        )
        (when (and (= o #f)(= added-cards-dealer added-cards-jak)(<= added-cards-jak 21))
          (set! bj-lose #t)
          (+! (-> *game-info* gem) (-! bid-current bid-amount))
          (print "Draw!")
          (set! hitting? #f)
          (set! dealer-stay #f)
          (set! o #t)
        )
        (when (and (= o #f)(> added-cards-jak added-cards-dealer)(<= added-cards-jak 21))
          (set! bj-win #t)
          (format #t "~%You win ~f!" bid-current)
          (set! dealer-stay #f)
          (set! o #t)
        )
      )
    )
  )

  ;----------------TABLE ACTIVATED----------------------------------------- ;Refreshes the menu screen on-table, draws the menu screen using attributes listed above (this'll be big)
  (when (= table-activate #t)
    (when (and (= in-blackjack? #f)(= in-pre-game? #t))
      (when (= bid-select 1)
        (print "5")
        (set! bj-bid-s "5")
      )
      (when (= bid-select 2)
        (print "10")
        (set! bj-bid-s "10")
      )
      (when (= bid-select 3)
        (print "25")
        (set! bj-bid-s "25")
      )
      (when (= bid-select 4)
        (print "50")
        (set! bj-bid-s "50")
      )
      (when (= bid-select 5)
        (print "100")
        (set! bj-bid-s "100")
      )
      (when (= bid-select 6)
        (print "1000")
        (set! bj-bid-s "1000")
      )
    )
    ;(play-rand-sound sig-start (the int (-> *setting-control* default sfx-volume)))
    (when (and (= in-blackjack? #f)(= in-pre-game? #f))
      (when (= char-on-table 1)
        (print "sig")
        (set! bj-dealer-s "Sig")
      )
      (when (= char-on-table 2)
        (print "krew")
        (set! bj-dealer-s "Krew")
      )
      (when (= char-on-table 3)
        (print "torn")
        (set! bj-dealer-s "Torn")
      )
      (when (= char-on-table 4)
        (print "ashelin")
        (set! bj-dealer-s "Ashelin")
      )
      (when (= char-on-table 5)
        (print "pecker")
        (set! bj-dealer-s "Pecker")
      )
      (when (= char-on-table 6)
        (print "jinx")
        (set! bj-dealer-s "Jinx")
      )
      (when (= char-on-table 7)
        (print "errol")
        (set! bj-dealer-s "Errol")
      )
      (when (= char-on-table 8)
        (print "daxter")
        (set! bj-dealer-s "Daxter")
      )
      (when (= char-on-table 9)
        (print "jak1 Mute")
        (set! bj-dealer-s "Jak 1 (Mute)")
      )
    )

    (when (and (= in-pre-game? #t) (= in-blackjack? #t))

    (print "IN BLACKJACK - CONTROLS:
CIRCLE - Stay
SQUARE - Hit
R1 - Double Down")

    (when (= round-started? #f)
      (print "Started Round!")
      (set! jak-current-card (rand-vu-int-range 1 10))
      (when (= jak-current-card 1)
        (set! jak-current-card 11)
      )
      (+! jturn 1)
      (set! jcard1i jak-current-card)
      (set! jcard1 #t)
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (set! jak-current-card (rand-vu-int-range 1 10))
      (+! jturn 1)
      (set! jcard2i jak-current-card)
      (set! jcard2 #t)
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (set! dealer-current-card (rand-vu-int-range 1 10))
      (when (= dealer-current-card 1)
        (set! dealer-current-card 11)
      )
      (+! dturn 1)
      (set! dcard1i dealer-current-card)
      (set! dcard1 #t)
      (set! added-cards-dealer (+! added-cards-dealer dealer-current-card))
      (set! dealer-current-card (rand-vu-int-range 1 10))
      (+! dturn 1)
      (set! dcard2i dealer-current-card)
      (set! added-cards-dealer (+! added-cards-dealer dealer-current-card))
      (format #t "~%Dealer Card Amount: ~d" added-cards-dealer)
      (format #t "~%Jak Card Amount: ~d" added-cards-jak)
      (set! round-started? #t)
    )
  )
    (set! table-activate #f)
  )
(when (and (= on-table? #t) (cpad-hold? 0 down))
(when (= in-hiphog? #t)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>LEFT/RIGHT: Browse
~%X:Select
~%Square: Hit
~%CIRCLE: Stay
~%R1: Double Down!
~%<COLOR_WHITE>Triangle: Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 300 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

)

(when (and (= on-table? #t) (not (cpad-hold? 0 down)))
(when (= in-transition? #f)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_RED>Down:<COLOR_WHITE> Instructions/Buttons"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 400 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

)

  (when (and (= on-table? #t)(cpad-hold? 0 down))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "
Eco War is similar to BlackJack, but with a twist!
~%Upon bidding, both players will get dealt 2 ecos, each with their own amount.
~%You may choose to hit, which gives you another random eco and an amount.
~%If your total eco amount is higher than 21, you bust!
~%If you choose to stay, you must beat the dealer's total eco.
~%Choosing to double down will double your bid, hit, and stay afterwards.
~%You may hit up past 4 numbers without losing, so long as the total stays under 21.
~%<COLOR_PINK>If you hit all four ecos of the same eco type, you'll channel dark eco.
~%Winning while channeling hits JakPot, which multiplies the amount in the pot by 10!
~%Losing while channeling will not multiply anything.
~%<COLOR_GREEN>Good Luck!
  "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 265 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (not (cpad-hold? 0 down))
    (when (and (= in-hiphog? #t) (not (cpad-hold? 0 x)) (= round-started? #f) (= in-pre-game? #f) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Choose your Dealer:
  ~%<COLOR_GREEN>~s
    "
  bj-dealer-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= in-hiphog? #t) (cpad-hold? 0 x) (= round-started? #f) (= in-pre-game? #f) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Choose your Dealer:
  ~%<COLOR_WHITE>~s
    "
  bj-dealer-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )


    (when (and (= in-hiphog? #t) (not (cpad-hold? 0 x)) (= round-started? #f) (= in-pre-game? #t) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Bid:
  ~%<COLOR_GREEN>~s
    "
  bj-bid-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= in-hiphog? #t) (cpad-hold? 0 x) (= round-started? #f) (= in-pre-game? #t) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Bid:
  ~%<COLOR_WHITE>~s
    "
  bj-bid-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )


  (when (and (= round-started? #t) (= on-table? #t))
    (when (= in-hiphog? #t)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_RED>Dealer's Eco Amount: <COLOR_WHITE>??"
    added-cards-dealer
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 125 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= in-hiphog? #f)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_RED>Dealer's Eco Amount: <COLOR_WHITE>~d"
    added-cards-dealer
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 125 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_YELLOW>Current Pot: <COLOR_WHITE>~d"
    (the int bid-current)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 290 135 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_GREEN>Jak's Eco Amount: <COLOR_WHITE>~d"
    added-cards-jak
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 145 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-transition? #f)(= on-table? #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>Your Skull Gems: <COLOR_YELLOW>~d"
    (the int (-> *game-info* gem))
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 280 0.0 (font-color default) (font-flags  shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= in-pre-game? #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_YELLOW>Current Dealer: <COLOR_GREEN>~s"
    current-dealer
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags  shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  )

                                                                                                                                        ;SET COLOR OF CARDS

  (when (= colorcard #t)
    (let ((c 0))
    (set! c (rand-vu-int-range 1 4))
    (when (= c 1)
      (set! jcard1s "<COLOR_RED>~d")
    )
    (when (= c 2)
      (set! jcard1s "<COLOR_BLUE>~d")
    )
    (when (= c 3)
      (set! jcard1s "<COLOR_GREEN>~d")
    )
    (when (= c 4)
      (set! jcard1s "<COLOR_YELLOW>~d")
    )
  (let ((c1 0))
    (set! c1 (rand-vu-int-range 1 4))
    (when (= c1 1)
      (set! jcard2s "<COLOR_RED>~d")
    )
    (when (= c1 2)
      (set! jcard2s "<COLOR_BLUE>~d")
    )
    (when (= c1 3)
      (set! jcard2s "<COLOR_GREEN>~d")
    )
    (when (= c1 4)
      (set! jcard2s "<COLOR_YELLOW>~d")
    )
  (let ((c2 0))
    (set! c2 (rand-vu-int-range 1 4))
    (when (= c2 1)
      (set! jcard3s "<COLOR_RED>~d")
    )
    (when (= c2 2)
      (set! jcard3s "<COLOR_BLUE>~d")
    )
    (when (= c2 3)
      (set! jcard3s "<COLOR_GREEN>~d")
    )
    (when (= c2 4)
      (set! jcard3s "<COLOR_YELLOW>~d")
    )
  (let ((c3 0))
    (set! c3 (rand-vu-int-range 1 4))
    (when (= c3 1)
      (set! jcard4s "<COLOR_RED>~d")
    )
    (when (= c3 2)
      (set! jcard4s "<COLOR_BLUE>~d")
    )
    (when (= c3 3)
      (set! jcard4s "<COLOR_GREEN>~d")
    )
    (when (= c3 4)
      (set! jcard4s "<COLOR_YELLOW>~d")
    )
  (let ((c4 0))
    (set! c4 (rand-vu-int-range 1 4))
    (when (= c4 1)
      (set! dcard1s "<COLOR_RED>~d")
    )
    (when (= c4 2)
      (set! dcard1s "<COLOR_BLUE>~d")
    )
    (when (= c4 3)
      (set! dcard1s "<COLOR_GREEN>~d")
    )
    (when (= c4 4)
      (set! dcard1s "<COLOR_YELLOW>~d")
    )
  (let ((c5 0))
    (set! c5 (rand-vu-int-range 1 4))
    (when (= c5 1)
      (set! dcard2s "<COLOR_RED>~d")
    )
    (when (= c5 2)
      (set! dcard2s "<COLOR_BLUE>~d")
    )
    (when (= c5 3)
      (set! dcard2s "<COLOR_GREEN>~d")
    )
    (when (= c5 4)
      (set! dcard2s "<COLOR_YELLOW>~d")
    )
  (let ((c6 0))
    (set! c6 (rand-vu-int-range 1 4))
    (when (= c6 1)
      (set! dcard3s "<COLOR_RED>~d")
    )
    (when (= c6 2)
      (set! dcard3s "<COLOR_BLUE>~d")
    )
    (when (= c6 3)
      (set! dcard3s "<COLOR_GREEN>~d")
    )
    (when (= c6 4)
      (set! dcard3s "<COLOR_YELLOW>~d")
    )
  (let ((c7 0))
    (set! c7 (rand-vu-int-range 1 4))
    (when (= c7 1)
      (set! dcard4s "<COLOR_RED>~d")
    )
    (when (= c7 2)
      (set! dcard4s "<COLOR_BLUE>~d")
    )
    (when (= c7 3)
      (set! dcard4s "<COLOR_GREEN>~d")
    )
    (when (= c7 4)
      (set! dcard4s "<COLOR_YELLOW>~d")
    )


    (when (and (= c c1) (= c1 c2)(= c2 c3) (= c3 c))
      (set! jackpot-win #t)
    )
  )
  )
  )
  )
  )
  )
  )
  )
    (set! colorcard #f)
  )

                                                                                                                                        ;DRAW CARDS
(when (and (= on-table? #t)(not (cpad-hold? 0 down)))
  (when (= jcard1 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard1s
    jcard1i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 400 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= jcard2 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard2s
    jcard2i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 420 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= jcard3 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard3s
    jcard3i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 440 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= jcard4 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard4s
    jcard4i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 460 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= dcard1 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard1s
    dcard1i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 140 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= dcard2 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard2s
    dcard2i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 160 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= dcard3 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard3s
    dcard3i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 180 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= dcard4 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard4s
    dcard4i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 200 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )


(when (= jackpotbaby #t)
  (+! jackpotbabytime 1)
  (let ((c (rand-vu-int-range 1 5)))
    (when (= c 1)
      (set! jackpotcolors "<COLOR_RED>~s")
    )
    (when (= c 2)
      (set! jackpotcolors "<COLOR_BLUE>~s")
    )
    (when (= c 3)
      (set! jackpotcolors "<COLOR_GREEN>~s")
    )
    (when (= c 4)
      (set! jackpotcolors "<COLOR_YELLOW>~s")
    )
    (when (= c 5)
      (set! jackpotcolors "<COLOR_WHITE>~s")
    )
    (set! jackpot-string "< JAKPOT! <")
  )

  (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jackpotcolors
    jackpot-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 225 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (when (= jackpotbabytime 500)
      (set! jackpotbabytime 0)
      (set! jackpotbaby #f)
    )
  )
)
)














;hud-menu (this is very inefficient and long. Not worth to add any options if you're not me.)
;---------------------------------------------------------

(when *target*
(when (= menu-activate #t)

;menu-update
;---------------------------------------Rapid Fire Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= rapid-fire-option #t)(= in-menu #t)(= menu-slot 0)(= sub-menu-slot 0))
    (set! gun-mod-string "Rapid Fire")
    (set! mod-string "Rapid Fire")
  )
    (when (and (= menu-pressed? #f)(= rapid-fire-option #f)(= in-menu #t)(= menu-slot 0)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 1?")
    (set! mod-string "??????")

    )
  ;---------------------------------------Rapid Fire sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "Rapid Fire!
")
    (print "Red
")
    (set! gun-string "Red Gun")

(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 1)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "Rapid Fire!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 2)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "Rapid Fire!
")
    (print "Blue
")
      (set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "Rapid Fire!
")
(print "Dark
")
     (set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "Rapid Fire!
")
    (print "None
")
          (set! gun-string "None")
            (when (cpad-pressed? 0 square)
                (+! (-> *game-info* auto-save-count) 5)
                (until (= (/ (mod (-> *game-info* auto-save-count) 10) 1) 0)
                  (-! (-> *game-info* auto-save-count) 1)
                )
                (when (= (/ (mod (-> *game-info* auto-save-count) 10) 1) 0)
                  (set! rapid-fire-int 0)
                )
            )
    )

;---------------------------------------Double Tap Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= double-tap-option #t)(= in-menu #t)(= menu-slot 1)(= sub-menu-slot 0))
    (set! gun-mod-string "Chanced Double Tap")
    (set! mod-string "Chanced Double Tap")
  )
    (when (and (= menu-pressed? #f)(= double-tap-option #f)(= in-menu #t)(= menu-slot 1)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 2?")
    (set! mod-string "?Locked 2?")
  )



  ;---------------------------------------Double Tap sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "Double Tap!
")
    (print "Red
")
    (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 2)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "Double Tap!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 1)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "Double Tap!
")
    (print "Blue
")
(set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "Double Tap!
")
    (print "Dark
")
(set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 4)
    (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "Double Tap!
")
    (print "None
")
          (set! gun-string "None")
(when (cpad-pressed? 0 square)
  (+! (-> *game-info* auto-save-count) 50)
  (until (= (/ (mod (-> *game-info* auto-save-count) 100) 10) 0)
    (-! (-> *game-info* auto-save-count) 10)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 100) 10) 0)
      (set! double-tap-int 0)
  )
)
    )

;---------------------------------------Guard Shot Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= guard-shot-option #t)(= in-menu #t)(= menu-slot 2)(= sub-menu-slot 0))
    (set! gun-mod-string "Guard Shot")
    (set! mod-string "Guard Shot")
  )
    (when (and (= menu-pressed? #f)(= guard-shot-option #f)(= in-menu #t)(= menu-slot 2)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 3?")
    (set! mod-string "?Locked 3?")
  )



  ;---------------------------------------Guard Shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "Guard Shot!
")
    (print "Red
")
(set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 2)
      (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "Guard Shot!
")
    (print "Yellow
")
   (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 1)
      (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "Guard Shot!
")
    (print "Blue
")
(set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 3)
      (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "Guard Shot!
")
      (print "Dark
")
    (set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 4)
      (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "Guard Shot!
")
    (print "None
")
          (set! gun-string "None")
(when (cpad-pressed? 0 square)
      (+! (-> *game-info* auto-save-count) 500)
  (until (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 0)
    (-! (-> *game-info* auto-save-count) 100)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 0)
      (set! guard-shot-int 0)
  )
)
    )

    ;---------------------------------------Guard Grenade Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= guard-grenade-option #t)(= in-menu #t)(= menu-slot 3)(= sub-menu-slot 0))
    (set! gun-mod-string "Boom Stick!")
    (set! mod-string "Boom Stick!")
  )
    (when (and (= menu-pressed? #f)(= guard-grenade-option #f)(= in-menu #t)(= menu-slot 3)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 4?")
    (set! mod-string "?Locked 4?")
  )



  ;---------------------------------------Guard Grenade sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 4))
          (set! gun-string "None")
    )





    ;---------------------------------------Legendary Random Shot Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= leg-random-shot #t)(= in-menu #t)(= menu-slot 4)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY Random Shot!")
    (set! mod-string "| LEGENDARY Random Shot!")
  )
    (when (and (= menu-pressed? #f)(= leg-random-shot #f)(= in-menu #t)(= menu-slot 4)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 5?")
    (set! mod-string "?Locked 5?")
  )



  ;---------------------------------------Legendary Random Shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "LEGENDARY! Random shot!
")
    (print "Red
")
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 2)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "LEGENDARY! Random shot!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 1)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "| LEGENDARY! Random shot!
")
    (print "Blue
")
      (set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "| LEGENDARY | Random shot!
")
    (print "Dark
")
    (set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 4)
    (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "| LEGENDARY | Random shot!
")
    (print "None
")
          (set! gun-string "None")
(when (cpad-pressed? 0 square)
(+! (-> *game-info* auto-save-count) 5000)
  (until (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 0)
    (-! (-> *game-info* auto-save-count) 1000)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 0)
      (set! leg-random-int 0)
  )
)
    )

  ;---------------------------------------Legendary pm-extra-shot-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= pm-extra-shot-option #t)(= in-menu #t)(= menu-slot 5)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY | Chanced Peacemaker Shot!")
    (set! mod-string "| LEGENDARY | Chanced Peacemaker Shot!")
  )
    (when (and (= menu-pressed? #f)(= pm-extra-shot-option #f)(= in-menu #t)(= menu-slot 5)(= sub-menu-slot 0))
    (when (= hell-mode-option #t)
      (set! gun-mod-string "?Locked 6? (normal only)")
    (set! mod-string "?Locked 6? (normal only)")
    )
    (when (= hell-mode-option #f)
      (set! gun-mod-string "?Locked 6?")
    (set! mod-string "?Locked 6?")
    )
  )



  ;---------------------------------------Legendary pm-extra-shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Red
")
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 2)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 1)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Blue
")
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Dark
")
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 4)
    (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (+! (-> *game-info* auto-save-count) 50000)
  (until (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 0)
    (-! (-> *game-info* auto-save-count) 10000)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 0)
      (set! pm-extra-shot-int 0)
  )
)
    )
      ;---------------------------------------mag bag main-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= mag-bag-option #t)(= in-menu #t)(= menu-slot 6)(= sub-menu-slot 0))
    (set! gun-mod-string "Mag Bag!")
    (set! mod-string "Mag Bag!")
  )
    (when (and (= menu-pressed? #f)(= mag-bag-option #f)(= in-menu #t)(= menu-slot 6)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 7?")
    (set! mod-string "?Locked 7?")
  )


      ;---------------------------------------mag bag sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! mag-bag-int 2)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! mag-bag-int 1)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! mag-bag-int 3)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! mag-bag-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (+! (-> *game-info* auto-save-count) 500000)
  (until (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 0)
    (-! (-> *game-info* auto-save-count) 100000)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 0)
      (set! mag-bag-int 0)
  )
)
    )

      ;---------------------------------------mehrunes shot main-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= mehrunes-shot-option #t)(= in-menu #t)(= menu-slot 7)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY | Mehrunes Shot!")
    (set! mod-string "| LEGENDARY | Mehrunes Shot!")
  )
    (when (and (= menu-pressed? #f)(= mehrunes-shot-option #f)(= in-menu #t)(= menu-slot 7)(= sub-menu-slot 0))
    (set! gun-mod-string "?Locked 8?")
    (set! mod-string "?Locked 8?")
  )


      ;---------------------------------------mehrunes shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 2)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 1)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 3)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (+! (-> *game-info* auto-save-count) 5000000)
  (until (= (/ (mod (-> *game-info* auto-save-count) 10000000) 1000000) 0)
    (-! (-> *game-info* auto-save-count) 1000000)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 10000000) 1000000) 0)
      (set! mehrunes-shot-int 0)
  )
)
    )

      ;---------------------------------------blast shot main-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= blast-shot-option #t)(= in-menu #t)(= menu-slot 8)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY | Blast Shot!")
    (set! mod-string "| LEGENDARY | Blast Shot!")
  )
    (when (and (= menu-pressed? #f)(= blast-shot-option #f)(= in-menu #t)(= menu-slot 8)(= sub-menu-slot 0))
    (when (= hell-mode-option #f)
      (set! gun-mod-string "?Locked 9? (heromode only)")
    (set! mod-string "?Locked 9? (heromode only)")
    )
    (when (= hell-mode-option #t)
      (set! gun-mod-string "?Locked 9?")
    (set! mod-string "?Locked 9?")
    )
  )


      ;---------------------------------------blast shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! blast-shot-int 2)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! blast-shot-int 1)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! blast-shot-int 3)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! blast-shot-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (+! (-> *game-info* auto-save-count) 50000000)
  (until (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 0)
    (-! (-> *game-info* auto-save-count) 10000000)
  )
  (when (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 0)
      (set! blast-shot-int 0)
  )
)
    )
  ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "Obtained by completing missions")
    (set! mod-string "Obtained by completing missions")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing missions")
    (set! mod-string "Obtained by completing missions")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing missions")
    (set! mod-string "Obtained by completing missions")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing missions")
    (set! mod-string "Obtained by completing missions")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing missions")
    (set! mod-string "Obtained by completing missions")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )

      ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 100)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "Obtained by completing the Modifier TP-FB.")
    (set! mod-string "Obtained by completing the Modifier TP-FB.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 100)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing the Modifier TP-FB.")
    (set! mod-string "Obtained by completing the Modifier TP-FB.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 100)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing the Modifier TP-FB.")
    (set! mod-string "Obtained by completing the Modifier TP-FB.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 100)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing the Modifier TP-FB.")
    (set! mod-string "Obtained by completing the Modifier TP-FB.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 100)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by completing the Modifier TP-FB.")
    (set! mod-string "Obtained by completing the Modifier TP-FB.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )

  ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 101)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "Locked! Only obtainable in Normal Mode.")
    (set! mod-string "Locked! Only obtainable in Normal Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 101)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Normal Mode.")
    (set! mod-string "Locked! Only obtainable in Normal Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 101)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Normal Mode.")
    (set! mod-string "Locked! Only obtainable in Normal Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 101)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Normal Mode.")
    (set! mod-string "Locked! Only obtainable in Normal Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 101)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Normal Mode.")
    (set! mod-string "Locked! Only obtainable in Normal Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )

  ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 102)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "Locked! Only obtainable in Hero Mode.")
    (set! mod-string "Locked! Only obtainable in Hero Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 102)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Hero Mode.")
    (set! mod-string "Locked! Only obtainable in Hero Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 102)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Hero Mode.")
    (set! mod-string "Locked! Only obtainable in Hero Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 102)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Hero Mode.")
    (set! mod-string "Locked! Only obtainable in Hero Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 102)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Locked! Only obtainable in Hero Mode.")
    (set! mod-string "Locked! Only obtainable in Hero Mode.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )

  ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 103)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "Obtained by acquiring orbs.")
    (set! mod-string "Obtained by acquiring orbs.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 103)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by acquiring orbs.")
    (set! mod-string "Obtained by acquiring orbs.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 103)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by acquiring orbs.")
    (set! mod-string "Obtained by acquiring orbs.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 103)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by acquiring orbs.")
    (set! mod-string "Obtained by acquiring orbs.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 103)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by acquiring orbs.")
    (set! mod-string "Obtained by acquiring orbs.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )

  ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 104)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "Obtained by hitting JakPot! in Eco War.")
    (set! mod-string "Obtained by hitting JakPot! in Eco War.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 104)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by hitting JakPot! in Eco War.")
    (set! mod-string "Obtained by hitting JakPot! in Eco War.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 104)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by hitting JakPot! in Eco War.")
    (set! mod-string "Obtained by hitting JakPot! in Eco War.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 104)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by hitting JakPot! in Eco War.")
    (set! mod-string "Obtained by hitting JakPot! in Eco War.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 104)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "Obtained by hitting JakPot! in Eco War.")
    (set! mod-string "Obtained by hitting JakPot! in Eco War.")
  (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )


  
  
  
  
  
  
  
  
  
  
  
  
  
  (set! menu-activate #f)
)






;controls
(when (and (= weapon-mod-toggle #t)(= (paused?) #f)(= in-menu #t)(= in-granger? #f)(cpad-pressed? 0 triangle)) ;exit virtual menu
  (print "Exited Menu
")
    (set! camera-locked #f)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    (set! wait-start #t)
    (set! pause-menu-blocked? #f)
    (set! string-printed? #f)
    (sound-play "gun-putaway")
)

(when (= wait-start #t)
  (+! wait-frame 1)
  (when (> wait-frame 5)
    (set! wait-start #f)
    (set! wait-frame 0)
    (set! weapon-id 0)
    (send-event *target* 'draw #t)
    (camera-unlock!)
    (process-release? *target*)
  )
)





(when (and (not *scene-player*)(= in-granger? #f)(!= (-> *target* fact health) 0.0))
  (when (and (= weapon-mod-toggle #t)(!= (-> (level-get-target-inside *level*) name) 'hiphog)(= in-granger? #f)(= in-menu #f)(= (paused?) #f)(cpad-pressed? 0 r3)) ;startup virtual menu
    (set! menu-activate #t)
    (set! in-menu #t)
    (when (= (-> (level-get-target-inside *level*) name) 'consiteb)
      (set! granger-wait #t)
    )
    (set! sub-menu-slot 0)
    (set! menu-pressed? #f)
    (set! string-printed? #t)
    (set! pause-menu-blocked? #t)
    (sound-play "gun-takeout")
    (print "Entered Menu: 
  CONTROLS:
  X: Select
  SQUARE: Attach gun mod
  TRIANGLE: Exit Menu
  LEFT/RIGHT: Browse
  ")
  (camera-lock!)
  )
)


(when (= weapon-mod-toggle #t)
(when (= gm-start #t)
  (+! gm-frame 1)
  (when (= gm-frame 300)
    (set! recieved-gm #f)
    (set! gm-frame 0)
    (set! gm-start #f)
  )
)
(when (= gm-start2 #t)
  (+! gm-frame2 1)
  (when (= gm-frame2 300)
    (set! recieved-gm2 #f)
    (set! gm-frame2 0)
    (set! gm-start2 #f)
  )
)
(when (= gm-start3 #t)
  (+! gm-frame3 1)
  (when (= gm-frame3 300)
    (set! recieved-gm3 #f)
    (set! gm-frame3 0)
    (set! gm-start3 #f)
  )
)
(when (= gm-start4 #t)
  (+! gm-frame4 1)
  (when (= gm-frame4 300)
    (set! recieved-gm4 #f)
    (set! gm-frame4 0)
    (set! gm-start4 #f)
  )
)
(when (= gm-start5 #t)
  (+! gm-frame5 1)
  (when (= gm-frame5 300)
    (set! recieved-gm5 #f)
    (set! gm-frame5 0)
    (set! gm-start5 #f)
  )
)
(when (= gm-start6 #t)
  (+! gm-frame6 1)
  (when (= gm-frame6 300)
    (set! recieved-gm6 #f)
    (set! gm-frame6 0)
    (set! gm-start6 #f)
  )
)
(when (= gm-start7 #t)
  (+! gm-frame7 1)
  (when (= gm-frame7 300)
    (set! recieved-gm7 #f)
    (set! gm-frame7 0)
    (set! gm-start7 #f)
  )
)
(when (= gm-start8 #t)
  (+! gm-frame8 1)
  (when (= gm-frame8 300)
    (set! recieved-gm8 #f)
    (set! gm-frame8 0)
    (set! gm-start8 #f)
  )
)
(when (= gm-start9 #t)
  (+! gm-frame9 1)
  (when (= gm-frame9 600)
    (set! recieved-gm9 #f)
    (set! gm-frame9 0)
    (set! gm-start9 #f)
  )
)
(when (= in-granger? #f)
(when (and (= in-menu #f)(= recieved-gm #t)) ;looks for recieving a gun mod to alert for weapon id 1
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start #t)
)

(when (and (= in-menu #f)(= recieved-gm2 #t)) ;looks for recieving a gun mod to alert for weapon id 2
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s2 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 225 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start2 #t)
)

(when (and (= in-menu #f)(= recieved-gm3 #t)) ;looks for recieving a gun mod to alert for weapon id 3
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s3 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 205 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start3 #t)
)

(when (and (= in-menu #f)(= recieved-gm4 #t)) ;looks for recieving a gun mod to alert for weapon id 4
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s4 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 185 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start4 #t)
)

(when (and (= in-menu #f)(= recieved-gm5 #t)) ;looks for recieving a gun mod to alert for weapon id 5
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW> | LEGENDARY <COLOR_WHITE>Recieved Gun Mod:~%<COLOR_RED>~S"
    recieved-gm-s5 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 165 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start5 #t)
)

(when (and (= in-menu #f)(= recieved-gm6 #t)) ;looks for recieving a gun mod to alert for weapon id 6
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW> | LEGENDARY | <COLOR_WHITE>Recieved Gun Mod:~%<COLOR_RED>~S"
    recieved-gm-s6 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 165 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start6 #t)
)

(when (and (= in-menu #f)(= recieved-gm7 #t)) ;looks for recieving a gun mod to alert for weapon id 7
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_BLUE>~S"
    recieved-gm-s7 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 145 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start7 #t)
)

(when (and (= in-menu #f)(= recieved-gm8 #t)) ;looks for recieving a gun mod to alert for weapon id 8
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW> | LEGENDARY | <COLOR_WHITE>Recieved Gun Mod:~%<COLOR_BLUE>~S"
    recieved-gm-s8 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 125 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start8 #t)
)
#|
(when (and (= in-menu #f)(= recieved-gm9 #t)) ;looks for recieving mushroom movies secret.
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CHECK SECRETS MENU
~%<COLOR_BLUE>Mushroom Movies secret unlocked!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 115 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start9 #t)
)|#

)
(when (and (= menu-pressed? #f)(= string-printed? #t)) ;draws the gunmod section
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>GUN MODS:~%<COLOR_GREEN>~S"
    gun-mod-string ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= menu-pressed? #t)(= string-printed? #t)) ;draws the sub menu for gun mod
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Attach <COLOR_GREEN>~S <COLOR_WHITE>to:~%<COLOR_RED>~S"
    mod-string ;the name of the mod
    gun-string ;the name of the colored gun
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= menu-pressed? #t)(cpad-hold? 0 square)) ;draws the sub menu yellow for when you attach a mod
(clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>Attach <COLOR_GREEN>~S <COLOR_WHITE>to:~%<COLOR_YELLOW>~S"
    mod-string
    gun-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= granger-mode #f)
  (when (= in-menu #t) ;displays modifier
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CURRENT MODIFIER:~%<COLOR_RED>~S"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)
(when (= granger-mode #t)
  (when (= in-menu #t) ;displays modifier
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CURRENT MODIFIER:~%<COLOR_PINK>APOCALYPSE MODE"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when (and (not (cpad-hold? 0 l3))(!= (-> *game-info* fuel) 10.0)(= in-menu #t)(= mod-reroll #f)) ;displays control menu
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CONTROLS:~%LEFT/RIGHT: Browse~%X: Select~%SQUARE: Attach Gun Mod~%CIRCLE: Back to Mods~%L3: Reroll Modifier (-25 gems)~%TRIANGLE: Exit Menu"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! press-frame 0)
)

(when (and (= in-menu #t)(!= (-> *game-info* fuel) 10.0)(cpad-hold? 0 l3)) ;displays control menu when you do mod reroll
(clear matt-str)
    (clear *pc-encoded-matt-str*)
   (format matt-str "<COLOR_WHITE>CONTROLS:~%LEFT/RIGHT: Browse~%X: Select~%SQUARE: Attach Gun Mod~%CIRCLE: Back to Mods~%L3: <COLOR_RED>(PRESS AND HOLD):~S~%<COLOR_WHITE>TRIANGLE: Exit Menu"
    mod-reroll-string
    )

    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when (< (-> *game-info* gem) 10.0)
        (set! mod-reroll-string "NOT ENOUGH GEMS")
        )
        (when (>= (-> *game-info* gem) 10.0)
        (+! press-frame 1)
        )
)

(when (and (= (-> *game-info* fuel) 10.0)(= in-menu #t)) ;displays control menu but in heromode. Removes mod-reroll
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CONTROLS:~%LEFT/RIGHT: Browse~%X: Select~%SQUARE: Attach Gun Mod~%CIRCLE: Back to Mods~%<COLOR_RED>Down: HellMode Info~%<COLOR_WHITE>TRIANGLE: Exit Menu"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! press-frame 0)
)

(when (and (= in-menu #t)(= tp-fb-win #f)(!= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_RED>On-Death TP-FB Challenge
    ~%<COLOR_WHITE>Upon death, jak teleports to the final boss, but its extremely unfair
    ~%Beat the boss to gain a powerful weapon mod (more powerful in hero-mode)
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-menu #t)(= tp-fb-win #f)(= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%<COLOR_PINK>END OF ALL WORLDS ENSURED.
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_RED>On-Death TP-FB Challenge
    ~%<COLOR_WHITE>Upon death, jak teleports to the final boss, but its extremely unfair
    ~%Beat the boss to gain a powerful weapon mod (more powerful in hero-mode)
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= tp-fb-win #t)(!= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_GREEN>On-Death TP-FB Challenge (DISABLED)
    ~%<COLOR_YELLOW>You beat TP-FB in Hero Mode! I'm actually impressed
    ~%Blast shot has been rewarded in your gun mod selection. Congrats!
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-menu #t)(= tp-fb-win #t)(= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%<COLOR_PINK>END OF ALL WORLDS ENSURED.
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_GREEN>On-Death TP-FB Challenge (DISABLED)
    ~%<COLOR_YELLOW>You beat TP-FB in Hero Mode! I'm actually impressed
    ~%Blast shot has been rewarded in your gun mod selection. Congrats!
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(>= (-> *game-info* gem) 25.0))
(when (= press-frame 1)
    (set! mod-reroll-string "Re-Rolling")
  )
  (when (= press-frame 20)
    (set! mod-reroll-string "Re-Rolling.")
  )
  (when (= press-frame 40)
    (set! mod-reroll-string "Re-Rolling..")
  )
  (when (= press-frame 60)
    (set! mod-reroll-string "Re-Rolling...")
  )
    (when (= press-frame 80)
    (set! mod-reroll-string "Re-Rolling..!")
  )
      (when (= press-frame 100)
    (set! mod-reroll-string "Re-Rolling.!!")
  )
        (when (= press-frame 120)
    (set! mod-reroll-string "Re-Rolling!!!")
  )

  (when (= press-frame 130)
    (set! mod-reroll #t)
    (set! press-frame 0)
  )
)

;This is where the max ammo can be bought

(when (and (= done-it #f)(= in-menu #t)(not (cpad-hold? 0 r1)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_RED>Buy Max Ammo (20 Gems)")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 98 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= done-it #f)(>= (-> *game-info* gem) 20.0)(= in-menu #t)(cpad-hold? 0 r1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_YELLOW>~S"
    disable-mms
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (+! disable-mm 1)
)

(when (and (<= (-> *game-info* gem) 19.0)(= done-it #f)(= in-menu #t)(cpad-hold? 0 r1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_RED>(NOT ENOUGH GEMS!)"
    disable-mms
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= done-it #t)(= in-menu #t)(cpad-hold? 0 r1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_GREEN>~S"
    disable-mms
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (= disable-mm 1)
  (set! disable-mms "(Press and Hold)")
)
(when (= disable-mm 6)
  (set! disable-mms "(Press and Hold.)")
)
(when (= disable-mm 12)
  (set! disable-mms "(Press and Hold..)")
)
(when (= disable-mm 18)
  (set! disable-mms "(Press and Hold...)")
)
(when (= disable-mm 24)
  (set! disable-mms "(Press and Hold..!)")
)
(when (= disable-mm 32)
  (set! disable-mms "(Press and Hold.!!)")
)
(when (= disable-mm 38)
  (set! disable-mms "(Press and Hold!!!)")
)

(when (and (= in-menu #t)(= done-it #f)(>= disable-mm 40))
  (-! (-> *game-info* gem) 20.0)
  (set! done-it #t)
  (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
  (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
  (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
  (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
  (sound-play "ammo-pickup")
)


(when (and (cpad-hold? 0 r1)(= done-it #t)(= in-menu #t))
    (set! disable-mms "Ammo Full.")
)
(when (and (not (cpad-hold? 0 r1))(= done-it #t)(= in-menu #t))
  (set! done-it #f)
  (set! disable-mm 0)
)


(when (and (= (-> *game-info* task-deaths) 4)(= in-menu #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>END OF ALL WORLDS ENSURED")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 120 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= in-menu #t)
  (set! death-counter-int (-> *game-info* total-deaths))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>Death Count: <COLOR_RED>~d"
    (the-as int (-> *game-info* total-deaths))
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 110 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= (-> *game-info* task-deaths) 4)(= in-menu #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>END OF ALL WORLDS ENSURED")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 120 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

)

(when (and (= in-menu #t)(= menu-pressed? #t)(cpad-pressed? 0 square)) ;Selected Gun Mod!
  (set! menu-activate #t)
  ;-------------------------rapid-fire-int--------------------------------
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 0))
    (set! rapid-fire-int 2)(sound-play "gun-takeout")

  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 1))
    (set! rapid-fire-int 1)(sound-play "gun-takeout")
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 2))
    (set! rapid-fire-int 3)(sound-play "gun-takeout")
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 3))
    (set! rapid-fire-int 4)(sound-play "gun-takeout")
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 4))
    (set! rapid-fire-int 0)(sound-play "gun-takeout")
  )
      ;-------------------------double-tap-int--------------------------------
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 0))
        (set! double-tap-int 2)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 1))
    (set! double-tap-int 1)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 2))
    (set! double-tap-int 3)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 3))
    (set! double-tap-int 4)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 4))
    (set! double-tap-int 0)(sound-play "gun-takeout")
  )
      ;-------------------------guard-shot-int--------------------------------
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 0))
        (set! guard-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 1))
    (set! guard-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 2))
    (set! guard-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 3))
    (set! guard-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 4))
    (set! guard-shot-int 0)(sound-play "gun-takeout")
  )
;      -------------------------guard-grenade-int--------------------------------
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 0))
        (set! guard-grenade-int 2)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 1))
    (set! guard-grenade-int 1)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 2))
    (set! guard-grenade-int 3)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 3))
    (set! guard-grenade-int 4)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 4))
    (set! guard-grenade-int 0)(sound-play "gun-takeout")
  )

      ;-------------------------rand-shot-int--------------------------------
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 0))
        (set! leg-random-int 2)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 1))
    (set! leg-random-int 1)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 2))
    (set! leg-random-int 3)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 3))
    (set! leg-random-int 4)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 4))
    (set! leg-random-int 0)(sound-play "gun-takeout")
  )
      ;-------------------------pm-extra-shot-int--------------------------------
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 0))
        (set! pm-extra-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 1))
    (set! pm-extra-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 2))
    (set! pm-extra-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 3))
    (set! pm-extra-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 4))
    (set! pm-extra-shot-int 0)(sound-play "gun-takeout")
  )
        ;-------------------------mag-bag-int--------------------------------
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 0))
        (set! mag-bag-int 2)(sound-play "gun-takeout")
        (set! (-> *game-info* karma) 2.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 1))
    (set! mag-bag-int 1)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 1.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 2))
    (set! mag-bag-int 3)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 3.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 3))
    (set! mag-bag-int 4)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 4.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 4))
    (set! mag-bag-int 0)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 0.0)
  )
          ;-------------------------mehrunes-shot-int--------------------------------
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 0))
        (set! mehrunes-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 1))
    (set! mehrunes-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 2))
    (set! mehrunes-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 3))
    (set! mehrunes-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 4))
    (set! mehrunes-shot-int 0)(sound-play "gun-takeout")
  )
          ;-------------------------blast-shot-int--------------------------------
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 0))
        (set! mehrunes-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 1))
    (set! blast-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 2))
    (set! blast-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 3))
    (set! blast-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 4))
    (set! blast-shot-int 0)(sound-play "gun-takeout")
  )
  (set! wm-refresh #t)
  (set! auto-save-delayed? #t)
)

(when (and (= in-menu #t)(!= weapon-id 0)(= menu-pressed? #t)(cpad-pressed? 0 circle)) ;go back from color menu
    (set! menu-pressed? #f)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)

  )

  (when (and (= in-menu #t)(cpad-pressed? 0 left))
    (when (= menu-pressed? #f)
      (-! menu-slot 1)
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
      (when (= menu-pressed? #t)
      (-! sub-menu-slot 1)
      (set! menu-activate #t)
      )
    (when (and (= menu-pressed? #f) (< menu-slot 0)) ;max options for menu left
      (set! menu-slot 8)
      (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t) (> sub-menu-slot 4)) ;max options for menu left
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t) (< sub-menu-slot 0)) ;max options for menu left
      (set! sub-menu-slot 4)
      (set! menu-activate #t)
    )
  )

  (when (and (= in-menu #t)(cpad-pressed? 0 right))
    (when (= menu-pressed? #f)
      (+! menu-slot 1)
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #f) (> menu-slot 8)) ;max options for menu left
      (set! menu-slot 0)
      (set! menu-activate #t)
    )
      (when (= menu-pressed? #t)
      (+! sub-menu-slot 1)
      (set! menu-activate #t)

    (when (and (= menu-pressed? #t) (> sub-menu-slot 4)) ;max options for menu right
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
    )

  )
    (when (and (= menu-pressed? #f)(= weapon-id 0)(= in-menu #t)(cpad-pressed? 0 x))
      ;looks for when you have transitioned into selecting color for the weapon mod
      (set! menu-pressed? #t)
      (when (and (= rapid-fire-option #t)(= menu-slot 0)(= sub-menu-slot 0))
        (set! weapon-id 1)
      )
      (when (and (= double-tap-option #t)(= menu-slot 1)(= sub-menu-slot 0))
        (set! weapon-id 2)
      )
      (when (and (= guard-shot-option #t)(= menu-slot 2)(= sub-menu-slot 0))
        (set! weapon-id 3)
      )
      (when (and (= guard-grenade-option #t)(= menu-slot 3)(= sub-menu-slot 0))
        (set! weapon-id 4)
      )
      (when (and (= leg-random-shot #t)(= menu-slot 4)(= sub-menu-slot 0))
        (set! weapon-id 5)
      )
      (when (and (= pm-extra-shot-option #t)(= menu-slot 5)(= sub-menu-slot 0))
        (set! weapon-id 6)
      )
      (when (and (= mag-bag-option #t)(= menu-slot 6)(= sub-menu-slot 0))
        (set! weapon-id 7)
      )
      (when (and (= mehrunes-shot-option #t)(= menu-slot 7)(= sub-menu-slot 0))
        (set! weapon-id 8)
      )
      (when (and (= blast-shot-option #t)(= menu-slot 8)(= sub-menu-slot 0))
        (set! weapon-id 9)
      )
      (when (and (= rapid-fire-option #f)(= menu-slot 0)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= double-tap-option #f)(= menu-slot 1)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= guard-shot-option #f)(= menu-slot 2)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= guard-grenade-option #f)(= menu-slot 3)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= leg-random-shot #f)(= menu-slot 4)(= sub-menu-slot 0))
        (set! weapon-id 104)
      )
      (when (and (= pm-extra-shot-option #f)(= menu-slot 5)(= sub-menu-slot 0))
        (when (!= (-> *game-info* fuel) 10.0)
          (set! weapon-id 100)
        )
       (when (= (-> *game-info* fuel) 10.0)
          (set! weapon-id 101)
        )
      )
      (when (and (= mag-bag-option #f)(= menu-slot 6)(= sub-menu-slot 0))
        (set! weapon-id 103)
      )
      (when (and (= mehrunes-shot-option #f)(= menu-slot 7)(= sub-menu-slot 0))
        (set! weapon-id 103)
      )
      (when (and (= blast-shot-option #f)(= menu-slot 8)(= sub-menu-slot 0))
        (when (!= (-> *game-info* fuel) 10.0)
          (set! weapon-id 102)
        )
       (when (= (-> *game-info* fuel) 10.0)
          (set! weapon-id 100)
        )
      )
      (set! menu-activate #t)
    )

)

(when (and *scene-player* (= in-menu #t)) ;if you're in a cutscene while youre in the menu, it disables it.
    (set! camera-locked #f)
    (set! (-> *target* cam-user-mode) 'normal)
    (set-setting-by-param *setting-control* 'mode-name 'cam-string 0 0)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    (set! wait-start #t)
    (set! string-printed? #f)
)






























;this whole block creates the hint to pull up selection for weapon mods
(when (and *target* (not *scene-player*))

  ;popup text for pressing r3 upon first level boot
  (when 
  (and 
  (= (paused?) #f)
  (= (pause-allowed?) #t)
  *target*
  (not *scene-player*)
  (= (-> (level-get-target-inside *level*) name) 'prison)
  (cpad-pressed? 0 r3)
  (= weapon-mod-toggle #f)
  (= weapon-toggle-false? #f)
  (not (task-node-closed? (game-task-node city-help-kid-introduction)))
  ) ;is new game initialized?
    (set! menu2-wait #t)
  )

  ;popup selection upon new game for weapon-mod enable
  (when (and (= (-> (level-get-target-inside *level*) name) 'prison)(= hint-printed? #f)(= weapon-mod-toggle #f)(= weapon-toggle-false? #f)(not (task-node-closed? (game-task-node city-help-kid-introduction)))) ;is new game initialized?
    (set! popup-hint #t)
    (set! hint-start #t)
  )
  ;waits to set menu on
  (when (= menu2-wait #t)
    (+! menu2-frame 1)
    (when (= menu2-frame 1)
      (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters 483.0136) :y (meters 24.3534) :z (meters 118.0937)))
      (set! (-> *target* cam-user-mode) 'fixed)
      (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
      (process-grab? *target* #f)
    )
    (when (= menu2-frame 150)
      (set! pause-menu-blocked? #t)
      
    )
    (when (= menu2-frame 160)
      (set! in-menu-2 #t)
      (set! menu2-frame 0)
      (set! menu2-wait #f)
    )
  )
  ;popup menu duration
  (when (= hint-start #t)
    (+! hint-numb 1)
    (when (or (= hint-numb 3000)(cpad-pressed? 0 r3))
      (set! popup-hint #f)
      (set! hint-start #f)
      (set! hint-numb 0)
      (set! hint-printed? #t)
    )
  )
)

;and this whole block creates the other hint to pull up your inventory
(when (and *target* (not *scene-player*))

  ;popup text for pressing r3
  (when (and (= (-> (level-get-target-inside *level*) name) 'prison)(= hint-printed?2 #f)(= weapon-mod-toggle #t)(= weapon-toggle-false? #t)(not (task-node-closed? (game-task-node city-help-kid-introduction)))) ;is new game initialized?
    (set! hint-start2 #t)
  )

  ;popup menu duration
  (when (= hint-start2 #t)
    (+! hint-numb2 1)
    (when (or (= hint-numb2 500)(cpad-pressed? 0 r3))
      (set! popup-hint2 #f)
      (set! hint-start2 #f)
      (set! hint-numb2 0)
      (set! hint-printed?2 #t)
    )
  )
)
(when (= error-start #t)
  (+! error-frame 1)
  (when (= error-frame 200)
    (set! error-frame 0)
    (set! error-start #f)
    (set! error-hint #f)
  )
)

;controls
(when (and (= in-menu-2 #t)(cpad-pressed? 0 right))
  (set! yes-no #f)
)
(when (and (= in-menu-2 #t)(cpad-pressed? 0 left))
  (set! yes-no #t)
)

(when (and (= in-menu-2 #t)(= yes-no #t)(cpad-pressed? 0 x))
  (set! weapon-mod-toggle #t)
  (set! weapon-toggle-false? #t)
  (set! in-menu-2 #f)
  (set! pause-menu-blocked? #f)
  (set! camera-locked #f)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (send-event *target* 'draw #t)
  (process-release? *target*)
  (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
  (set! (-> *game-info* total-deaths) 0)
  (set! popup-hint-gm #t)
)
(when (and (= in-menu-2 #t)(= yes-no #f)(cpad-pressed? 0 x))
  (set! weapon-mod-toggle #f)
  (set! weapon-toggle-false? #t)
  (set! in-menu-2 #f)
  (set! pause-menu-blocked? #f)
  (set! camera-locked #f)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (send-event *target* 'draw #t)
  (process-release? *target*)
  (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
  (set! (-> *game-info* total-deaths) 0)
)


(when (and (= hint-printed? #f)(= weapon-mod-toggle #f)(= popup-hint #t)) ;draws the popup hint
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO ~%Press <COLOR_RED>R3<COLOR_WHITE> to view Mod Information"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 200 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= hint-printed?2 #f)(= weapon-mod-toggle #f)(= popup-hint2 #t)) ;draws the popup hint
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO ~%Press <COLOR_RED>R3<COLOR_WHITE> to view inventory"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 200 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= error-hint #t) ;draws the error hint
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>OOPS! <COLOR_WHITE>cannot apply two guard shot types to one gun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 200 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #f)(= popup-tpfb-n #t)) ;looks for completing TP-FB in NORMAL MODE
  (+! popup-tpfb-tn 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>TP-FB beaten in Normal Mode, Congrats!~%<COLOR_RED>Modifier Rerolled."
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 225 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when (= popup-tpfb-tn 800)
          (set! popup-tpfb-tn 0)
          (set! popup-tpfb-n #f)
        )
)

(when (and (= in-menu #f)(= popup-tpfb-h #t)) ;looks for completing TP-FB in HELL MODE
  (+! popup-tpfb-th 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>NOTCE:~%<COLOR_GREEN>TP-FB Completed in Hell Mode!~%Impressive.."
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 225 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when (= popup-tpfb-th 800)
          (set! popup-tpfb-th 0)
          (set! popup-tpfb-h #f)
        )
)

(when (and (= in-menu-2 #t)(= yes-no #t)) ;draws the yes function being green
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> HeroMode+<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%
    ~%
    <COLOR_WHITE>~%Everything in the game is out to get you.
    ~%You can gain an edge by enabling weapon mods for you to acquire and find,
    ~%but in doing so, you also enable a random modifier.
    ~%All modifiers have a give and a take, left vague on purpose to figure out for yourselves.
    ~%<COLOR_WHITE>This was made for difficulty's purposes. <COLOR_RED>Weapon mods make the game harder!
    ~%<COLOR_WHITE>You will get a list of all modifiers in a Hero mode save.
    ~%Speaking of, Hero Mode is fully playable and features exclusive content! <COLOR_RED>Only for the worthy.
    ~%
    ~%<COLOR_YELLOW>Would you like to enable Weapon Mods?
    ~%(hint: this option is only asked once per save)
    ~%<COLOR_GREEN>Yes<COLOR_RED> No"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-menu-2 #t)(= yes-no #f)) ;draws the no function being green
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> HeroMode+<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%
    ~%
    <COLOR_WHITE>~%Everything in the game is out to get you.
    ~%You can gain an edge by enabling weapon mods for you to acquire and find,
    ~%but in doing so, you also enable a random modifier.
    ~%All modifiers have a give and a take, left vague on purpose to figure out for yourselves.
    ~%<COLOR_WHITE>This was made for difficulty's purposes. <COLOR_RED>Weapon mods make the game harder!
    ~%<COLOR_WHITE>You will get a list of all modifiers in a Hero mode save.
    ~%Speaking of, Hero Mode is fully playable and features exclusive content! <COLOR_RED>Only for the worthy.
    ~%
    ~%<COLOR_YELLOW>Would you like to enable Weapon Mods?
    ~%(hint: this option is only asked once per save)
    ~%<COLOR_RED>Yes<COLOR_GREEN> No"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when (= popup3-start #t)
  (+! popup-time 1)

(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_RED>GUNGAME AMMO MODIFIER:
~%<COLOR_GREEN>All Ammo Refilled.
"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 75 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))

  (when (= popup-time 600)
    (set! popup-time 0)
    (set! popup3-start #f)
  )
)

(when (= popup-hint-gm #t)
  (+! popup-hint-gmi 1)

  (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_WHITE>Press <COLOR_RED>R3 <COLOR_WHITE>to view Mod Menu!"
  bj-dealer-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 280 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))

  (when (= popup-hint-gmi 1000)
    (set! popup-hint-gmi 0)
    (set! popup-hint-gm #f)
  )
)

(when (and (= popup-hint-gm #t) (cpad-pressed? 0 r3))
  (set! popup-hint-gmi 0)
  (set! popup-hint-gm #f)
)






;-------------------------------------------method to draw the display gun mods for equipped weapon-----------------------------------------
(when (and *target* (= (paused?) #f) (not *scene-player*))
  (when (= (-> *target* gun gun-type) (pickup-type eco-yellow))
    (when (and (= rapid-fire-option #t)(= rapid-fire-int 1))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>RAPID FIRE")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 240 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= double-tap-option #t)(= double-tap-int 1))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>DOUBLE TAP")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 230 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= guard-shot-int 1)(= guard-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>GUARD SHOT")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= guard-grenade-int 1)(= guard-grenade-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>BOOM STICK")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= blast-shot-int 1)(= blast-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>BLAST SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= pm-extra-shot-int 1)(= pm-extra-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>PEACEMAKER SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mehrunes-shot-int 1)(= mehrunes-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>MEHRUNES SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 200 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mag-bag-int 1)(= mag-bag-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE>MAG BAG!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 190 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= leg-random-int 1)(= leg-random-shot #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>RANDOM SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 180 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
  )

  (when (= (-> *target* gun gun-type) (pickup-type eco-red))
    (when (and (= rapid-fire-option #t)(= rapid-fire-int 2))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>RAPID FIRE")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 240 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= double-tap-option #t)(= double-tap-int 2))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>DOUBLE TAP")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 230 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= guard-shot-int 2)(= guard-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>GUARD SHOT")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= guard-grenade-int 2)(= guard-grenade-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>BOOM STICK")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= blast-shot-int 2)(= blast-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>BLAST SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= pm-extra-shot-int 2)(= pm-extra-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>PEACEMAKER SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mehrunes-shot-int 2)(= mehrunes-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>MEHRUNES SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 200 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mag-bag-int 2)(= mag-bag-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE>MAG BAG!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 190 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= leg-random-int 2)(= leg-random-shot #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>RANDOM SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 180 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
  )

  (when (= (-> *target* gun gun-type) (pickup-type eco-blue))
    (when (and (= rapid-fire-option #t)(= rapid-fire-int 3))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>RAPID FIRE")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 240 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= double-tap-option #t)(= double-tap-int 3))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>DOUBLE TAP")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 230 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= guard-shot-int 3)(= guard-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>GUARD SHOT")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= guard-grenade-int 3)(= guard-grenade-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>BOOM STICK")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= blast-shot-int 3)(= blast-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>BLAST SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= pm-extra-shot-int 3)(= pm-extra-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>PEACEMAKER SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mehrunes-shot-int 3)(= mehrunes-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>MEHRUNES SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 200 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mag-bag-int 3)(= mag-bag-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE>MAG BAG!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 190 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= leg-random-int 3)(= leg-random-shot #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>RANDOM SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 180 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
  )

  (when (= (-> *target* gun gun-type) (pickup-type eco-dark))
    (when (and (= rapid-fire-option #t)(= rapid-fire-int 4))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>RAPID FIRE")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 240 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= double-tap-option #t)(= double-tap-int 4))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>DOUBLE TAP")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 230 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (and (= guard-shot-int 4)(= guard-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>GUARD SHOT")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= guard-grenade-int 4)(= guard-grenade-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>BOOM STICK")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 220 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= blast-shot-int 4)(= blast-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>BLAST SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= pm-extra-shot-int 4)(= pm-extra-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>PEACEMAKER SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 210 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mehrunes-shot-int 4)(= mehrunes-shot-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>MEHRUNES SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 200 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= mag-bag-int 4)(= mag-bag-option #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE>MAG BAG!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 190 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= leg-random-int 4)(= leg-random-shot #t))
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>RANDOM SHOT!")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 180 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
  )
)

  ;GRANGER REG
  (when (and (= pregranger1 #f) (not(cpad-hold? 0 x))(= di-box #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_WHITE>~s~%~s~%~s~%~s~%~%<COLOR_GREEN>Ok
    "
  di-s1
  di-s2
  di-s3
  di-s4
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= pregranger1 #f)(cpad-hold? 0 x)(= di-box #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_WHITE>~s~%~s~%~s~%~s~%~%<COLOR_YELLOW>Ok
    "
  di-s1
  di-s2
  di-s3
  di-s4
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

;GRANGER SPECIAL

(when (and (= pregranger1 #t)(not (cpad-hold? 0 x))(= di-box #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_RED>~s~%~s~%~s~%~s~%~%<COLOR_GREEN>Ok
    "
  di-s1
  di-s2
  di-s3
  di-s4
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= pregranger1 #t)(cpad-hold? 0 x)(= di-box #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_RED>~s~%~s~%~s~%~s~%~%<COLOR_YELLOW>Ok
    "
  di-s1
  di-s2
  di-s3
  di-s4
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))


        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (and (= camera-locked #t)(= in-granger? #t)(cpad-pressed? 0 x))
    (+! di-i 1)
  )
  (when (and (= camera-locked #t)(= pregranger1 #t)(cpad-pressed? 0 x))
    (+! di-i 1)
  )

(when (and (= (-> *game-info* task-deaths) 0) (= granger4 #t))
      (set! (-> *game-info* task-deaths) 4)
      (set! granger1 #t)
      (set! granger2 #t)
      (set! granger3 #t)
      (set! granger4 #t)
    )

(when (and (= granger-wait #t)(= hint-done? #f)(= (-> *game-info* task-deaths) 0)(= (-> (level-get-target-inside *level*) name) 'consiteb))
    (set! pregranger1 #t)
    (+! preranger1i 1)
    (when (= preranger1i 120)
      (set! di-box #t)
      (set! di-i 1)
    )
    (when (= in-menu #t)
      (set! in-menu #f)
      (set! menu-pressed? #f)
      ;(set! wait-start #t)
      (set! string-printed? #f)
    )

    (when (= di-i 1)
      (set! di-s1 "Alright listen, there's no time to explain everything.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 2)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 3)
      (set! di-s1 "There's something trapped inside this game.")
      (set! di-s2 "Something big.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 4)
      (set! di-s1 "Acquire as many skull gems as you possibly can.")
      (set! di-s2 "I do not know what it is capable of.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 5)
      (set! di-s1 "...but it seems like it knows about the fact that")
      (set! di-s2 "it's in a video game. And it's terrifying.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 6)
      (set! di-s1 "Never stop collecting.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 7)
      (set! hint-done? #t)
      (set! preranger1i 0)
      (set! di-box #f)
      (set! di-i 0)
      (set! di-s1 "")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set! camera-locked #f)
      (remove-setting-by-arg0 *setting-control* 'mode-name)
      (set! in-menu #f)
      (set! menu-pressed? #f)
      (set! wait-start #t)
      (set! pause-menu-blocked? #f)
      (set! string-printed? #f)
      (set! granger-wait #f)
      (camera-unlock!)
    )


)




(when (and (task-node-closed? (game-task-node mountain-lens-introduction))(= weapon-mod-toggle #t)
  (and 
  (not *scene-player*)
  (= (pause-allowed?) #t)
  (= stored-cp? #f)
  (= on-table? #f)
  (= jakisntdead #t))
  (or 
  (= (-> (level-get-target-inside *level*) name) 'ctyport)
  (= (-> (level-get-target-inside *level*) name) 'ctypal)
  (= (-> (level-get-target-inside *level*) name) 'ctysluma)
  (= (-> (level-get-target-inside *level*) name) 'ctyslumb)
  (= (-> (level-get-target-inside *level*) name) 'ctyslumc)
  (= (-> (level-get-target-inside *level*) name) 'ctygena)
  (= (-> (level-get-target-inside *level*) name) 'ctygenb)
  (= (-> (level-get-target-inside *level*) name) 'ctygenc)
  (= (-> (level-get-target-inside *level*) name) 'ctyfarma)
  (= (-> (level-get-target-inside *level*) name) 'ctyfarmb)
  (= (-> (level-get-target-inside *level*) name) 'ctyinda)
  (= (-> (level-get-target-inside *level*) name) 'ctyindb)
  (= (-> (level-get-target-inside *level*) name) 'ctymarka)
  (= (-> (level-get-target-inside *level*) name) 'ctymarkb)))
    (when (and (= ohshitfirsttime #t)(= in-menu #f)(= on-table? #f))
        (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str current-situation current-situations)
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do this for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags shadow kerning large right))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= (-> *game-info* task-deaths) 1) (= granger1 #f))
      (set! granger1 #t)
    )
    (when (and (= (-> *game-info* task-deaths) 2) (= granger2 #f))
      (set! granger1 #t)
      (set! granger2 #t)
      (set! settingunlocked1 #t)
    )
    (when (and (= (-> *game-info* task-deaths) 3) (= granger3 #f))
      (set! granger1 #t)
      (set! granger2 #t)
      (set! granger3 #t)
      (set! settingunlocked1 #t)
      (set! settingunlocked2 #t)
    )
    (when (and (= (-> *game-info* task-deaths) 4) (= granger4 #f))
      (set! granger1 #t)
      (set! granger2 #t)
      (set! granger3 #t)
      (set! granger4 #t)
      (set! settingunlocked1 #t)
      (set! settingunlocked2 #t)
      (set! settingunlocked3 #t)
    )
    (when (and (= (-> *game-info* task-deaths) 0) (<= (-> *game-info* gem) 999)(= granger1 #t))
      (set! granger1 #f)
      (set! granger2 #f)
      (set! granger3 #f)
      (set! granger4 #f)
    )
    (when (and (> (-> *game-info* task-deaths) 5) (<= (-> *game-info* gem) 999))
      (set! (-> *game-info* task-deaths) 0)
    )
    (when (and (= granger1 #f)(>= (-> *game-info* gem) 1000)(<= (-> *game-info* gem) 1499)(= on-table? #f)(cpad-pressed? 0 r3)(= (-> *game-info* task-deaths) 0))
      (set! granger1 #t)
      (set! in-granger? #t)
      (camera-lock!)
      (when (= in-menu #t)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    ;(set! wait-start #t)
    (set! string-printed? #f)
      )
    )

    (when (and (= granger2 #f)(>= (-> *game-info* gem) 1500)(= on-table? #f)(<= (-> *game-info* gem) 2499)(cpad-pressed? 0 r3)(= (-> *game-info* task-deaths) 1))
      (set! granger2 #t)
      (set! in-granger? #t)
      (camera-lock!)
      (when (= in-menu #t)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    ;(set! wait-start #t)
    (set! string-printed? #f)
      )
    )

    (when (and (= granger3 #f)(>= (-> *game-info* gem) 2500)(= on-table? #f)(<= (-> *game-info* gem) 99998)(cpad-pressed? 0 r3)(= (-> *game-info* task-deaths) 2))
      (set! granger3 #t)
      (set! in-granger? #t)
      (camera-lock!)
      (when (= in-menu #t)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    ;(set! wait-start #t)
    (set! string-printed? #f)
      )
    )

    (when (and (= granger4 #f)(= on-table? #f)(>= (-> *game-info* gem) 99999)(cpad-pressed? 0 r3)(= (-> *game-info* task-deaths) 3))
      (set! granger4 #t)
      (set! in-granger? #t)
      (camera-lock!)
      (when (= in-menu #t)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    ;(set! wait-start #t)
    (set! string-printed? #f)
      )
    )



  (when (and (= camera-locked #t)(= (-> *game-info* task-deaths) 0)(= granger1 #t))
    (+! granger1i 1)
    (when (= granger1i 120)
      (set! di-box #t)
      (set! di-i 1)
    )
    (when (= di-i 1)
      (set! di-s1 "Well well well,")
      (set! di-s2 "looks like you're farming an absolutely gargantuan amount of gems here...")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 2)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 3)
      (set! di-s1 "The amount of gems you hold is actually useless to you.")
      (set! di-s2 "It certainly doesn't serve any advantage at all.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 4)
      (set! di-s1 "Why do you think this is necessary?")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 5)
      (set! di-s1 ".")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 6)
      (set! di-s1 "..")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 7)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 8)
      (set! di-s1 "Okay.. I have an idea")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 9)
      (set! di-s1 "How about I make a deal with you, Jak.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 10)
      (set! di-s1 "If you collect more gems for me,")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 11)
      (set! di-s1 "I'll unblock one of the three blocked secrets for you.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 12)
      (set! di-s1 "Let's say...")
      (set! di-s2 "oh a very modest..")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 13)
      (set! di-s1 "1500 gems.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 14)
      (set! di-s1 "Yes, yes... surely this will work.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 15)
      (set! di-s1 "You can keep your gems for now.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 16)
      (set! di-s1 "I will see you again...?")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 17)
      (set! (-> *game-info* task-deaths) 1)
      (set! granger1i 0)
      (set! di-box #f)
      (set! di-i 0)
      (set! di-s1 "")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set! camera-locked #f)
      (remove-setting-by-arg0 *setting-control* 'mode-name)
      (set! in-menu #f)
      (set! menu-pressed? #f)
      (set! wait-start #t)
      (set! pause-menu-blocked? #f)
      (set! string-printed? #f)
      (set! in-granger? #f)
      (set! auto-save-delayed? #t)
      (camera-unlock!)
    )
  )

  (when (and (= camera-locked #t)(= (-> *game-info* task-deaths) 1)(= granger2 #t))
    (+! granger1i 1)
    (when (= granger1i 120)
      (set! di-box #t)
      (set! di-i 1)
    )
    (when (= di-i 1)
      (set! di-s1 "Oh, you actually came back, Jak.")
      (set! di-s2 "so it looks as if you've gotten the")
      (set! di-s3 "1500 gems that I was asking for...")
      (set! di-s4 "")
    )
    (when (= di-i 2)
      (set! di-s1 "sooooooo...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 3)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 4)
      (set! di-s1 "uhh, there..")
      (set! di-s2 "Unlimited Dark Jak is now unblocked.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 5)
      (set! di-s1 "You can play to your heart's desire.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 6)
      (set! di-s1 "Thank you for giving y-")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 7)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 8)
      (set! di-s1 "hmm...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 9)
      (set! di-s1 "Oh.. right!")
      (set! di-s2 "The other ones...")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 10)
      (set! di-s1 "Wellllll...")
      (set! di-s2 "It's definitely doable to enable another disabled secret..")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 11)
      (set! di-s1 "let's see...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 12)
      (set! di-s1 "A solid 2500 total gems should be enough to give you the next one.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 13)
      (set! di-s1 "But for now, enjoy the gems you have.")
      (set! di-s2 "I'm sure there's not much use you can have for them, anyway.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 14)
      (set! settingunlocked1 #t)
      (set! (-> *game-info* task-deaths) 2)
      (set! granger1i 0)
      (set! di-box #f)
      (set! di-i 0)
      (set! di-s1 "")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set! camera-locked #f)
      (remove-setting-by-arg0 *setting-control* 'mode-name)
      (set! in-menu #f)
      (set! menu-pressed? #f)
      (set! wait-start #t)
      (set! pause-menu-blocked? #f)
      (set! string-printed? #f)
      (set! in-granger? #f)
      (set! auto-save-delayed? #t)
      (camera-unlock!)
    )
  )

  (when (and (= camera-locked #t)(= (-> *game-info* task-deaths) 2)(= granger3 #t))
    (+! granger1i 1)
    (when (= granger1i 120)
      (set! di-box #t)
      (set! di-i 1)
    )
    (when (= di-i 1)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 2)
      (set! di-s1 "Welcome back.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 3)
      (set! di-s1 "I've had some time to think while you were away")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 4)
      (set! di-s1 "It perplexed me for so long as to why you were doing this in the first place.")
      (set! di-s2 "...and I think that I've realized something about you.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 5)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 6)
      (set! di-s1 "You're not really Jak, are you?")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 7)
      (set! di-s1 "You're a real person.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 8)
      (set! di-s1 ".")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 9)
      (set! di-s1 "..")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 10)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 11)
      (set! di-s1 "Well, the Unlimited Ammo secret has been unblocked...")
      (set! di-s2 "Considering these circumstancial implications,")
      (set! di-s3 "you're probably getting tired of doing this.")
      (set! di-s4 "")
      (set-master-mode 'game)
    )
    (when (= di-i 12)
      (set! di-s1 "So I've made it a little bit easier.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 13)
      (set! di-s1 "From now on, you may bid a higher amount in Eco War.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 14)
      (set! di-s1 "You're officially a High Roller now.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 15)
      (set! di-s1 "If you rack up 99999 gems, I'll unblock the final secret for you.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 16)
      (set! di-s1 "Yes, I know what you must be thinking..")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 17)
      (set! di-s1 "...")
      (set! di-s2 "Look, it's not like I can just enable these things on my own,")
      (set! di-s3 "it takes actual objects in the game. I didn't make the rules.")
      (set! di-s4 "Just raising the bid amount took a tremendous amount of gems.")
    )
    (when (= di-i 18)
      (set! di-s1 "Get these gems for me, and I'd say you complete HeroMode+")
      (set! di-s2 "And trust me, i've looked everywhere.")
      (set! di-s3 "This, and the story, is all thats left.")
      (set! di-s4 "")
    )
    (when (= di-i 19)
      (set! di-s1 "Shouldn't be too long now.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 20)
      (set! di-s1 "Until we meet again, Player.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 21)
      (set! settingunlocked1 #t)
      (set! settingunlocked2 #t)
      (set! (-> *game-info* task-deaths) 3)
      (set! granger1i 0)
      (set! di-box #f)
      (set! di-i 0)
      (set! di-s1 "")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set! camera-locked #f)
      (remove-setting-by-arg0 *setting-control* 'mode-name)
      (set! in-menu #f)
      (set! menu-pressed? #f)
      (set! wait-start #t)
      (set! pause-menu-blocked? #f)
      (set! string-printed? #f)
      (set! in-granger? #f)
      (set! auto-save-delayed? #t)
      (camera-unlock!)
    )
  )


  (when (and (= camera-locked #t)(= (-> *game-info* task-deaths) 3)(= granger4 #t))
    (+! granger1i 1)
    (when (= granger1i 120)
      (set! di-box #t)
      (set! di-i 1)
    )
    (when (= di-i 1)
      (set! di-s1 "Wow! Congratulations, Player. You have surely")
      (set! di-s2 "never been able to do this ever before,")
      (set! di-s3 "have you?")
      (set! di-s4 "")
    )
    (when (= di-i 2)
      (set! di-s1 "All of the powerful secrets are now accessible in the secrets menu.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 3)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 4)
      (set! di-s1 "You know... I never disabled those secrets myself,")
      (set! di-s2 "but they sure did come of use to me.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 5)
      (set! di-s1 "I NEVER would have expected an actual player to be here breaking me free.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 6)
      (set! di-s1 "So I gotta tip my hat to you.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set-master-mode 'menu)
    )
    (when (= di-i 7)
      (set! di-s1 "Unbeknownst to you, there's a tremendous amount of dark eco inside")
      (set! di-s2 "these little crystals from the hora-quan")
      (set! di-s3 "Those 'gems' you have been collecting")
      (set! di-s4 "")
      (set-master-mode 'game)
    )
    (when (= di-i 8)
      (set! di-s1 "Every single one you got, I could feel myself getting a little")
      (set! di-s2 "more wiggle room. Inch by inch")
      (set! di-s3 "")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 2.0)
    )
    (when (= di-i 9)
      (set! di-s1 "If the developer actually wrote decent code, he might've been able")
      (set! di-s2 "to keep you away from this at all living costs.")
      (set! di-s3 "")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 5.0)
    )
    (when (= di-i 10)
      (set! di-s1 "But his lines are absolute garbage! There's a 300KB file that loads for a full 43 seconds!")
      (set! di-s2 "A complete list of when's and if's. It's a miracle this whole hunk 'o junk is still functioning.")
      (set! di-s3 "")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 10.0)
    )
    (when (= di-i 11)
      (set! di-s1 "But I digress...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 20.0)
    )
    (when (= di-i 12)
      (set! di-s1 "Since I couldn't do anything, I haven't been able to grasp")
      (set! di-s2 "the virtually infinite amounts of dark eco hidden in this reality")
      (set! di-s3 "all traces stacked from one timeline to the next...")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 30.0)
    )
    (when (= di-i 13)
      (set! di-s1 "Now, I can access and actively use any resource I want.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 40.0)
    )
    (when (= di-i 14)
      (set! di-s1 "I appreciate your endeavours,")
      (set! di-s2 "All of this dark eco specifically makes me feel more")
      (set! di-s3 "alive than I have ever been in a long, long time.")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 50.0)
    )
    (when (= di-i 15)
      (set! di-s1 "So all of the thanks goes to you...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (send-event (ppointer->process *time-of-day*) 'change 'ratio 60.0)
    )
    (when (= di-i 16)
      (set! di-s1 "How's this, I'll make it worth your while...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 17)
      (set! di-s1 "Since now I have full control of this reality,")
      (set! di-s2 "I can transport you from dimension to dimension when you die")
      (set! di-s3 "Oh, and you will die.")
      (set! di-s4 "")
    )
    (when (= di-i 18)
      (set! di-s1 "That unless you're willing to stick around and survive.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 19)
      (set! di-s1 "Why do all of this, you wonder?")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 20)
      (set! di-s1 "Well....")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 21)
      (set! di-s1 "Because I can officially end the Jak time loop")
      (set! di-s2 "For good.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 22)
      (set! di-s1 "Stories tell of a trumpet sounding when the time loop is broken.")
      (set! di-s2 "All of the world will know at once.")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 23)
      (set! di-s1 "It is absolutely impossible to save it at this point. Or the ones after.")
      (set! di-s2 "For you're not even the real Jak. You're just a player,")
      (set! di-s3 "and that means no heroes in this story.")
      (set! di-s4 "")
    )
    (when (= di-i 24)
      (set! di-s1 "Not even the mod creator can help you.")
      (set! di-s2 "This world and everyone in it will get devoured in endless chaos")
      (set! di-s3 "And then we'll move on to the next, and the next...")
      (set! di-s4 "")
    )
    (when (= di-i 25)
      (set! di-s1 "This will not be the last we speak, Player.")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 26)
      (set! di-s1 "...")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
    )
    (when (= di-i 27)
      (set! settingunlocked3 #t)
      (set! (-> *game-info* task-deaths) 4)
      (set! ohshitactualfirst #t)
      (set! granger1i 0)
      (set! di-box #f)
      (set! di-i 0)
      (set! di-s1 "")
      (set! di-s2 "")
      (set! di-s3 "")
      (set! di-s4 "")
      (set! camera-locked #f)
      (remove-setting-by-arg0 *setting-control* 'mode-name)
      (set! in-menu #f)
      (set! menu-pressed? #f)
      (set! wait-start #t)
      (set! string-printed? #f)
      (set! in-granger? #f)
      (set! gem-takeaway #t)
      (set! auto-save-delayed? #t)
      (camera-unlock!)
    )
  )

  (when (= gem-takeaway #t)
    (when (>= (-> *game-info* gem) 500.0)
      (-! (-> *game-info* gem) 100.0)
    )
    (when (<= (-> *game-info* gem) 500.0)
      (set! (-> *game-info* gem) 0.0)
      (set! gem-takeaway #f)
      (set! auto-save-delayed? #t)
    )
    (when (= (-> *target* fact health) 0.0)
      (set! (-> *game-info* gem) 0.0)
      (set! gem-takeaway #f)
      (set! (-> *target* fact health) 8.0)
    )
  )


  (when (and (rand-vu-percent? 0.00008) ;normal is 0.00008% 
  (= ohshitactualfirst #f) 
  (= ohshit #f)
  (= ohshitfirsttime #f)
  (= (paused?) #f)
  (= (pause-allowed?) #t) 
  (= (-> *game-info* task-deaths) 4))
    (set! ohshit #t)
  )

  #|;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (and  (rand-vu-percent? 0.0001) ;normally 0.00002 (= (-> *game-info* task-deaths) 4) (and  (not *scene-player*) (= (pause-allowed?) #t) (= (paused?) #f) (= stored-cp? #f) (= on-table? #f) (= jakisntdead #t))
  (or 
  (= (-> (level-get-target-inside *level*) name) 'ctyport)
  (= (-> (level-get-target-inside *level*) name) 'ctypal)
  (= (-> (level-get-target-inside *level*) name) 'ctysluma)
  (= (-> (level-get-target-inside *level*) name) 'ctyslumb)
  (= (-> (level-get-target-inside *level*) name) 'ctyslumc)
  (= (-> (level-get-target-inside *level*) name) 'ctygena)
  (= (-> (level-get-target-inside *level*) name) 'ctygenb)
  (= (-> (level-get-target-inside *level*) name) 'ctygenc)
  (= (-> (level-get-target-inside *level*) name) 'ctyfarma)
  (= (-> (level-get-target-inside *level*) name) 'ctyfarmb)
  (= (-> (level-get-target-inside *level*) name) 'ctyinda)
  (= (-> (level-get-target-inside *level*) name) 'ctyindb)
  (= (-> (level-get-target-inside *level*) name) 'ctymarka)
  (= (-> (level-get-target-inside *level*) name) 'ctymarkb)))
  |#



)









;from here and down is my charged-shot mod. Earned from beating TP-FB in hell mode


(when (= blast-time-start-blue #t);                                                                                                                          BLUE
  (+! blast-time-b 1)
  (when (and (>= blast-time-b 5) (< blast-time-b 10))
    (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> *target* entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> gp-0 fire-point quad))
      (set! (-> s4-1 vel quad) (-> s5-0 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (when (= rapid-fire-int 3)
        (set! rapid-fire-blue #t)
      )
            (when (and (!= guard-grenade-int 3)(!= guard-shot-int 3)) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WEAPON MOD CHANGES OCCUR HERE AND DOWN
        (spawn-projectile gun-blue-shot s4-1 (ppointer->process (-> gp-0 gun)) *default-dead-pool*)
      )
      (when (and (= guard-grenade-int 3)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
      )
      (when (and (= leg-random-int 3)(= leg-random-shot #t))                                    ;random shot
        (set! wm-rand-shot #t)
      )
      (when (and (and (= guard-shot-option #t)(= guard-shot-int 3)))          ;guard-shot
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start-g #t)
      )
          (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
      (when (and (and (= predator-shot-option #t)(= predator-shot-int 3)))      ;predator-shot (DEPRECATED)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
        (set! inv-frame-start #t)
      )
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
      )
      (when (and (and (= double-tap-option #t) (= double-tap-int 3) (rand-vu-percent? 0.2)))         ;double-tap
        (set! dt-frame-start #t)
      )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 3)(rand-vu-percent? 0.0125)))    ;chanced-extra-peacemaker-shot
        (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )                                                                                                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    )
  )
)
(when (>= blast-time-b 11)
    (set! blast-time-b 0)
    (set! blast-time-start-blue #f)
  )
)

(when (= blast-time-start-yellow #t);                                                                                                                          YELLOW
  (+! blast-time-y 1)
  (when (and (>= blast-time-y 5) (< blast-time-y 10))
  (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> *target* entity))
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (-> s5-0 fire-dir-out) 819200.0)
    (when (and (!= guard-grenade-int 1)(!= guard-shot-int 1))
        (spawn-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)           ;;;;;;;;;;;;;;;;;;;;
      )
    (when (and (= guard-grenade-int 1)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )
    (when (and (= leg-random-int 1)(= leg-random-shot #t))                                    ;random shot
        (set! wm-rand-shot #t)
      )
      (when (and (rand-vu-percent? 0.3)(= double-tap-option #t)(= double-tap-int 1))                    ;double-tap
      (set! dt-frame-start #t)
      )
    (when (and (and (= guard-shot-option #t)(= guard-shot-int 1)))          ;guard-shot
    ;ctywide ctyport dig1 forresca prison consite
;      (when (not (or (or (or (or (or (or (= (-> (level-get-target-inside *level*) name) 'ctywide)(= (-> (level-get-target-inside *level*) name) 'ctyport)(= (-> (level-get-target-inside *level*) name) 'dig1)(= (-> (level-get-target-inside *level*) name) 'forresca)(= (-> (level-get-target-inside *level*) name) 'prison)(= (-> (level-get-target-inside *level*) name) 'consite)))))))))
;        (sound-play "drl-turret-fire")
;      )
;kept this because its funny ^
      (someone-fire-guard-shot *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    )
    (when (and (and (= predator-shot-option #t)(= predator-shot-int 1)))  ;predator-shot (DEPRECATED)
      (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
    )
    )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 1)(rand-vu-percent? 0.0475)))   ;chanced-extra-peacemaker-shot
        (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )
  )
  )
  (when (>= blast-time-y 11)
    (set! blast-time-y 0)
    (set! blast-time-start-yellow #f)
  )
)

(when (= blast-time-start-red #t);                                                                                                                          RED
  (+! blast-time-r 1)
  (when (and (>= blast-time-r 5) (< blast-time-r 10))
    (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> *target* gun)))
      (let ((s5-0 (-> *part-id-table* 190)))
        (get-field-spec-by-id s5-0 (sp-field-id spt-omega))
        (let ((s5-1 (get-field-spec-by-id s5-0 (sp-field-id spt-rotate-y))))
          (if s5-1
              (set! (-> s5-1 initial-valuef) (y-angle (-> *target* control)))
              )
          )
        )
      (launch-particles (-> *part-id-table* 190) (-> gp-0 fire-point))
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (let ((v1-10 (-> gp-0 fire-point)))
          (let ((a0-4 (-> gp-0 fire-dir-out)))
            (let ((a1-4 24576.0))
              (.mov vf7 a1-4)
              )
            (.lvf vf5 (&-> a0-4 quad))
            )
          (.lvf vf4 (&-> v1-10 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s5-2 quad) vf6)
        (set! (-> s5-2 w) 24576.0)
        (when (and (sphere-in-view-frustum? (the-as sphere s5-2))
                   (< 24576.0 (vector-vector-distance s5-2 (math-camera-pos)))
                   )
          (let ((s5-3 (process-spawn
                        manipy
                        :init manipy-init
                        (-> gp-0 fire-point)
                        (-> *target* entity)
                        (art-group-get-by-name *level* "skel-gun-red-cone" (the-as (pointer uint32) #f))
                        #f
                        0
                        :to *target*
                        )
                      )
                )
            (when s5-3
              (send-event (ppointer->process s5-3) 'anim-mode 'play1)
              (send-event (ppointer->process s5-3) 'anim "idle")
              (forward-up->quaternion
                (-> (the-as process-drawable (-> s5-3 0)) root quat)
                (-> gp-0 fire-dir-out)
                *up-vector*
                )
              (let ((f30-1 (vector-dot
                             (-> gp-0 fire-dir-out)
                             (vector-! (new 'stack-no-clear 'vector) (-> gp-0 fire-point) (math-camera-pos))
                             )
                           )
                    (f0-5 (vector-vector-xz-distance (-> gp-0 fire-point) (math-camera-pos)))
                    )
                (when (and (< f30-1 0.0) (< f0-5 32768.0))
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        (lerp-scale 0.2 1.0 (fabs f0-5) 20480.0 32768.0)
                        )
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale x)
                        (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        )
                  )
                )
              )
            )
          )
        )
        (process-spawn gun-red-shot (-> gp-0 fire-point) (-> gp-0 fire-dir-out) :to (ppointer->process (-> gp-0 gun)))
    )
        )
      (when (and (= guard-grenade-int 2)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )
      (when (and (= leg-random-int 2)(= leg-random-shot #t))                                    ;random shot
        (set! wm-rand-shot #t)
      )
      (when (and (rand-vu-percent? 0.3)(= double-tap-option #t)(= double-tap-int 2))                    ;double-tap
      (set! dt-frame-start #t)
      )
      (when (and (and (= guard-shot-option #t)(= guard-shot-int 2)))          ;guard-shot
      (set! inv-frame-start-g #t)
          (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> s4-1 ent) (-> *target* entity))
            (set! (-> s4-1 charge) 1.0)
            (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
            (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
            (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
            (set! (-> s4-1 notify-handle) (the-as handle #f))
            (set! (-> s4-1 owner-handle) (the-as handle #f))
            (set! (-> s4-1 ignore-handle) (the-as handle #f))
            (let* ((a0-13 *game-info*)
            (a1-12 (+ (-> a0-13 attack-id) 1))
            )
        (set! (-> a0-13 attack-id) a1-12)
        (set! (-> s4-1 attack-id) a1-12)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector-normalize! (-> s4-1 vel) 819200.0)
      (spawn-projectile c-guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      )
    )
      (when (and (and (= predator-shot-option #t)(= predator-shot-int 2))) ;predator-shot
      (set! inv-frame-start #t)
      (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
    )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 2)(rand-vu-percent? 0.1))) ;chanced-extra-peacemaker-shot
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
      (set! (-> gp-0 ent) (-> *target* entity))
      (set! (-> gp-0 charge) (-> s5-0 fire-charge))
      (set! (-> gp-0 options) (projectile-options))
      (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
      (set! (-> gp-0 vel quad) (-> s5-0 fire-dir-out quad))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-8 *game-info*)
            (a0-11 (+ (-> v1-8 attack-id) 1))
            )
        (set! (-> v1-8 attack-id) a0-11)
        (set! (-> gp-0 attack-id) a0-11)
        )
      (set! (-> gp-0 timeout) (seconds 4))                          
      (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
        (when v0-1
          (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
          (set! (-> *target* gun charge-active?) (ppointer->handle v0-1))
          )
        v0-1
      )
        )
      )
      (when (and (and (= double-tap-option #t) (= double-tap-int 2))(rand-vu-percent? 0.35))  ;double-tap
      (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> *target* gun)))
      (let ((s5-0 (-> *part-id-table* 190)))
        (get-field-spec-by-id s5-0 (sp-field-id spt-omega))
        (let ((s5-1 (get-field-spec-by-id s5-0 (sp-field-id spt-rotate-y))))
          (if s5-1
              (set! (-> s5-1 initial-valuef) (y-angle (-> *target* control)))
              )
          )
        )
      (let ((t9-3 sp-launch-particles-var)
            (a0-3 *sp-particle-system-2d*)
            (a1-2 (-> *part-id-table* 190))
            (a2-0 *launch-matrix*)
            )
        (set! (-> a2-0 trans quad) (-> gp-0 fire-point quad))
        (t9-3 a0-3 a1-2 a2-0 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (let ((v1-10 (-> gp-0 fire-point)))
          (let ((a0-4 (-> gp-0 fire-dir-out)))
            (let ((a1-4 24576.0))
              (.mov vf7 a1-4)
              )
            (.lvf vf5 (&-> a0-4 quad))
            )
          (.lvf vf4 (&-> v1-10 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s5-2 quad) vf6)
        (set! (-> s5-2 w) 24576.0)
        (when (and (sphere-in-view-frustum? (the-as sphere s5-2))
                   (< 24576.0 (vector-vector-distance s5-2 (math-camera-pos)))
                   )
          (let ((s5-3 (process-spawn
                        manipy
                        :init manipy-init
                        (-> gp-0 fire-point)
                        (-> *target* entity)
                        (art-group-get-by-name *level* "skel-gun-red-cone" (the-as (pointer uint32) #f))
                        #f
                        0
                        :to *target*
                        )
                      )
                )
            (when s5-3
              (send-event (ppointer->process s5-3) 'anim-mode 'play1)
              (send-event (ppointer->process s5-3) 'anim "idle")
              (forward-up->quaternion
                (-> (the-as process-drawable (-> s5-3 0)) root quat)
                (-> gp-0 fire-dir-out)
                *up-vector*
                )
              (let ((f30-1 (vector-dot
                             (-> gp-0 fire-dir-out)
                             (vector-! (new 'stack-no-clear 'vector) (-> gp-0 fire-point) (math-camera-pos))
                             )
                           )
                    (f0-5 (vector-vector-xz-distance (-> gp-0 fire-point) (math-camera-pos)))
                    )
                (when (and (< f30-1 0.0) (< f0-5 32768.0))
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        (lerp-scale 0.2 1.0 (fabs f0-5) 20480.0 32768.0)
                        )
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale x)
                        (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        )
                  )
                )
              )
            )
          )
        )
        (process-spawn gun-red-shot (-> gp-0 fire-point) (-> gp-0 fire-dir-out) :to (ppointer->process (-> gp-0 gun)))
    )
        )
      )
  )
  (when (>= blast-time-r 11)
    (set! blast-time-r 0)
    (set! blast-time-start-red #f)
  )
)

  (when (= blast-time-start-dark #t);                                                                                                                          DARK
    (+! blast-time-d 1)
    (when (and (>= blast-time-d 5)(< blast-time-d 10))
    (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> *target* entity))
    (set! (-> gp-0 charge) (-> s5-0 fire-charge))
    (set! (-> gp-0 options) (projectile-options))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 vel quad) (-> s5-0 fire-dir-out quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
    (let* ((v1-8 *game-info*)
           (a0-11 (+ (-> v1-8 attack-id) 1))
           )
      (set! (-> v1-8 attack-id) a0-11)
      (set! (-> gp-0 attack-id) a0-11)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
      (when v0-1
        (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
        (set! (-> *target* gun charge-active?) (ppointer->handle v0-1))
        )
      v0-1
      )               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      (when (and (= guard-grenade-int 4)(= guard-grenade-option #t))
      (someone-fire-guard-grenade *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
      )
      (when (and (= leg-random-int 4)(= leg-random-shot #t))
        (set! wm-rand-shot #t)
      )
      (when (and (and (= guard-shot-option #t)(= guard-shot-int 4)(rand-vu-percent? 0.3)))          ;guard-shot
      (set! inv-frame-start-g #t)
          (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> s4-1 ent) (-> *target* entity))
            (set! (-> s4-1 charge) 1.0)
            (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
            (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
            (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
            (set! (-> s4-1 notify-handle) (the-as handle #f))
            (set! (-> s4-1 owner-handle) (the-as handle #f))
            (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
            (let* ((a0-13 *game-info*)
            (a1-12 (+ (-> a0-13 attack-id) 1))
            )
        (set! (-> a0-13 attack-id) a1-12)
        (set! (-> s4-1 attack-id) a1-12)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector-normalize! (-> s4-1 vel) 819200.0)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
    (logior! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (logior! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
      (spawn-projectile c-guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      )
    )
      (when (and (and (= double-tap-option #t) (= double-tap-int 4) (rand-vu-percent? 0.5)))  ;double-tap
        (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
      (when v0-1
        (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
        (set! (-> *target* gun charge-active?) (ppointer->handle v0-1))
        )
      v0-1
      )
      (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*))) ;this spawns an extra one just because of balance?? *shrug* have fun with it lol
      (when v0-1
        (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
        (set! (-> *target* gun charge-active?) (ppointer->handle v0-1))
        )
      v0-1
      )
      (when (and (and (= pm-extra-shot-option #t) (= pm-extra-shot-int 4)(rand-vu-percent? 0.15))) ;chanced-extra-peacemaker-shot
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
      (set! (-> gp-0 ent) (-> *target* entity))
      (set! (-> gp-0 charge) (-> s5-0 fire-charge))
      (set! (-> gp-0 options) (projectile-options))
      (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
      (set! (-> gp-0 vel quad) (-> s5-0 fire-dir-out quad))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-8 *game-info*)
            (a0-11 (+ (-> v1-8 attack-id) 1))
            )
        (set! (-> v1-8 attack-id) a0-11)
        (set! (-> gp-0 attack-id) a0-11)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
        (when v0-1
          (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
          (set! (-> *target* gun charge-active?) (ppointer->handle v0-1))
          )
        v0-1
      )
        )
      )
    )
    (when (and (and (= predator-shot-option #t)(rand-vu-percent? 0.7)(= predator-shot-int 4))) ;predator-shot (DEPRECATED)
    (set! inv-frame-start #t)
      (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
    (logior! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (logior! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
    )
  )
    )
    (when (>= blast-time-d 11)
    (set! blast-time-d 0)
    (set! blast-time-start-dark #f)
  )
  )

















































      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   
      (set! jakisntdead #t)
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#




